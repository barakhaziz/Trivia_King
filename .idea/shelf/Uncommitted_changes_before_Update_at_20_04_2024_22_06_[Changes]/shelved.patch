Index: Server.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import socket\r\nimport threading\r\nimport struct\r\nimport random\r\nimport time\r\nimport logging\r\nfrom datetime import datetime\r\n# Constants\r\nUDP_PORT = 13117\r\nTCP_PORT = 5555\r\nMAGIC_COOKIE = 0xabcddcba\r\n#CLIENT_RESPONSE_TIMEOUT = 13  # in seconds\r\nGAME_DURATION = 10  # in seconds\r\nWAIT_FOR_CLIENT_ANSWER_IN_ROUND = 10\r\nWAIT_FOR_2_CLIENTS_AT_LEAST = 25\r\n\r\n# Initialize logging\r\nlogging.basicConfig(filename='server.log', level=logging.INFO,\r\n                    format='%(asctime)s:%(levelname)s:%(message)s')\r\nTRUE_STATEMENTS = [\r\n    \"Michael Jordan won 6 NBA championships.\",\r\n    \"The Los Angeles Lakers have won 17 NBA championships.\",\r\n    \"LeBron James was drafted first overall in 2003.\",\r\n    \"The Boston Celtics have the most NBA championships.\",\r\n    \"Kobe Bryant spent his entire career with the Los Angeles Lakers.\",\r\n    \"Tim Duncan won five NBA championships with the San Antonio Spurs.\",\r\n    \"Shaquille O'Neal won his first NBA championship in 2000.\",\r\n    \"The Golden State Warriors broke the record for the most wins in a season in 2016.\",\r\n    \"Dirk Nowitzki is the highest-scoring foreign-born player in NBA history.\",\r\n    \"The Toronto Raptors won their first NBA Championship in 2019.\"\r\n]\r\n\r\nFALSE_STATEMENTS = [\r\n    \"The Chicago Bulls have won 10 NBA championships.\",\r\n    \"Kareem Abdul-Jabbar scored 100 points in a single NBA game.\",\r\n    \"The Detroit Pistons have never won an NBA championship.\",\r\n    \"Michael Jordan was drafted by the Portland Trail Blazers.\",\r\n    \"The Miami Heat was established in 1970.\",\r\n    \"Kevin Durant won his first NBA championship with the Oklahoma City Thunder.\",\r\n    \"The NBA was founded in 1949 as the National Basketball Association.\",\r\n    \"Allen Iverson won two NBA championships.\",\r\n    \"The New York Knicks won the NBA Championship in 2012.\",\r\n    \"LeBron James has never won an NBA MVP award.\"\r\n]\r\n\r\ndef print_color(text, color):\r\n    colors = {\r\n        \"red\": \"\\033[91m\",\r\n        \"green\": \"\\033[92m\",\r\n        \"yellow\": \"\\033[93m\",\r\n        \"blue\": \"\\033[94m\",\r\n        \"magenta\": \"\\033[95m\",\r\n        \"cyan\": \"\\033[96m\",\r\n        \"white\": \"\\033[97m\",\r\n        \"end\": \"\\033[0m\",\r\n    }\r\n    print(colors[color] + text + colors[\"end\"])\r\n\r\nclass TriviaServer:\r\n    def __init__(self):\r\n        self.running = True\r\n        self.origin_clients = []\r\n        self.game_characters = []\r\n        self.clients_didnt_answer = []\r\n        self.clients = []\r\n        self.correct_answers = []\r\n        self.game_inactive_players = []\r\n        self.get_answer=False\r\n        self.server_name = \"AwesomeTriviaServer\"\r\n        # To Make sure this field is always 32 characters long even if your server name is shorter.\r\n        self.padded_server_name = self.server_name.ljust(32)[:32]\r\n        # define UDP socket\r\n        self.udp_socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)\r\n        self.udp_socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\r\n        self.udp_socket.setsockopt(socket.SOL_SOCKET, socket.SO_BROADCAST, 1)\r\n        self.udp_socket.bind(('0.0.0.0', UDP_PORT))\r\n        # define TCP socket\r\n        self.tcp_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\r\n        self.tcp_socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\r\n        self.tcp_socket.bind(('0.0.0.0', TCP_PORT))\r\n        self.starting_port = TCP_PORT\r\n\r\n    def start(self, start_time=time.time()):\r\n        self.running = True\r\n        game_start_time = datetime.now()\r\n        logging.info(f\"Game started at {game_start_time}\")\r\n        self.tcp_socket.listen(5)  # Listen for incoming connections\r\n        print(f\"Server started, listening on IP address {self.udp_socket.getsockname()[0]}...\\n\")\r\n        threading.Thread(target=self.broadcast_message).start()\r\n        threading.Thread(target=self.wait_for_clients(start_time)).start()\r\n\r\n    def broadcast_message(self):\r\n        while True:\r\n            # UDP Broadcast the message to all devices on the network\r\n            broadcast_address = ('<broadcast>', UDP_PORT)\r\n            message = struct.pack(\"!Ib32sH\", MAGIC_COOKIE, 0x2, self.padded_server_name.encode('utf-8'), self.find_available_port())\r\n            self.udp_socket.sendto(message, broadcast_address)\r\n            if not self.running:  # Add a condition to stop if server stops running\r\n                break\r\n            time.sleep(1.3)\r\n            # Sleep for a short duration to avoid flooding the network\r\n\r\n    def wait_for_clients(self, start_time=time.time()):\r\n        threads = []\r\n        #start_time = time.time()\r\n        # every conected thread(client) start the 10 sec from the begining\r\n        self.tcp_socket.settimeout(GAME_DURATION)\r\n        while self.running:\r\n            try:\r\n                conn, tcp_addr = self.tcp_socket.accept()  # Accept TCP connection\r\n                logging.info(f\"New client {tcp_addr[0]} connected.\")\r\n                thread = threading.Thread(target=self.handle_tcp_client, args=(conn, tcp_addr))\r\n                threads.append(thread)# Add the thread to the list\r\n                thread.start()  # Join each thread\r\n                time.sleep(1.3)\r\n            except socket.timeout as e:\r\n                logging.error(f\"Accepting new client timed out: {e}\")\r\n                if time.time() - start_time >= GAME_DURATION and len(self.clients) >= 2:\r\n                    self.running = False\r\n                    self.start_game()\r\n                elif time.time() - start_time >= WAIT_FOR_2_CLIENTS_AT_LEAST and len(self.clients) == 1:\r\n                    self.cancel_game_due_to_insufficient_players()\r\n            except Exception as e:\r\n                logging.error(f\"An error occurred while accepting new connections: {e}\")\r\n                print_color(f\"An error occurred while accepting new connections: {e}\", \"red\")\r\n            time.sleep(1.3)\r\n\r\n    def handle_tcp_client(self, conn, addr):\r\n        try:\r\n            data = conn.recv(1024)\r\n            if data:\r\n                team_name = data.decode('utf-8').strip()\r\n                if any(team_name == existing_name for existing_name, _ in self.origin_clients):\r\n                    conn.sendall(f\"Name is taken, choose a new one.\".encode('utf-8'))\r\n                    logging.warning(f\"Duplicate name {team_name} attempt from {addr[0]} denied.\")\r\n                    print_color(f\"Duplicate name attempt from {addr[0]} denied.\", \"red\")\r\n                else:\r\n                    self.clients.append((team_name, conn))  # Store client conn\r\n                    self.origin_clients.append((team_name, conn))\r\n                    logging.info(f\"Team {team_name} connected from {addr[0]}\")\r\n                    print_color(f\"Team {team_name} connected from {addr[0]}\\n\", \"green\")\r\n            else:\r\n                # Handle the case where no data is received i.e., potential data corruption or empty message\r\n                logging.error(f\"No data received from {addr[0]}. Connection might be corrupt.\")\r\n                conn.close()\r\n        except socket.error as e:\r\n            logging.error(f\"Socket error with {addr[0]}: {e}\")\r\n            self.remove_client(conn, team_name)\r\n        except UnicodeDecodeError as e:\r\n            # Specifically catches errors that occur during data decoding, which helps in identifying corrupt or improperly formatted data.\r\n            logging.error(f\"Decoding error with data from {addr[0]}: {e}\")\r\n            self.remove_client(conn, team_name)\r\n        except Exception as e:\r\n            logging.error(f\"Unexpected error handling client {addr}: {e}\")\r\n            self.remove_client(conn, team_name)  # Safely remove client on error\r\n\r\n    # notify all inactive players to prevent clients disconnect from server\r\n    def notify_inactive_players(self, round):\r\n        for client in self.game_inactive_players:  # Ensure all inactive players get updated\r\n            name, conn = client\r\n            try:\r\n                logging.info(f\"sending demo message to inactive client {name} at {datetime.now()}\")\r\n                conn.sendall(f\"Round {round} but you are out of the game.\\n\".encode('utf-8'))\r\n            except Exception as e:\r\n                logging.error(f\"Error notifying inactive client {name}: {e}\")\r\n                print_color(f\"Error notifying inactive client {name}: {e}\", \"red\")\r\n\r\n    def start_game(self):\r\n        try:\r\n            round = 1\r\n            while len(self.clients) > 1:\r\n                self.get_answer = False\r\n                true_statement = random.choice(TRUE_STATEMENTS)\r\n                false_statement = random.choice(FALSE_STATEMENTS)\r\n                true_false = (true_statement, false_statement)\r\n                if round == 1:\r\n                    logging.info(f\"Start new game at {datetime.now()}\")\r\n                    message = f\"Welcome to the {self.server_name}, where we are answering trivia questions about NBA.\\n\"\r\n                    counter = 1\r\n                    for client in self.clients:\r\n                        message += f\"Player {counter} : {client[0]}\\n\"\r\n                        counter += 1\r\n                    message += f\" == \\n\"\r\n                else:\r\n                    player_names = \" and \".join(client[0] for client in self.clients)\r\n                    message = f\"\\033[96mRound {round}\\033[0m, played by {player_names}:\\n\"\r\n\r\n                stat = random.choice(true_false)\r\n                message += f\"\\033[93mTrue or False: {stat}\\nEnter your answer (T/F):\\n\\033[0m\"\r\n                logging.info(f\"The asked question of round {round} is {stat}\")\r\n                round += 1\r\n                print(message)\r\n                # Send the welcome message to all clients\r\n                threads = []\r\n                self.clients_didnt_answer = list(self.clients)\r\n                for client in self.clients:\r\n                    name, conn = client\r\n                    try:\r\n                        message_to_send = f\"{name}\\n{message}\\n\"\r\n                        conn.sendall(message_to_send.encode('utf-8'))\r\n                        thread = threading.Thread(target=self.handle_client_answer, args=(conn, stat, name))\r\n                        thread.start()\r\n                        threads.append(thread)\r\n                    except socket.error as e:\r\n                        logging.error(f\"Error sending data to client {name}: {e}\")\r\n                        self.clients.remove(client)\r\n                        print_color(f\"Error sending data to client {name}: {e}\", \"red\")\r\n                    except ConnectionResetError as e:\r\n                        logging.error(f\"Connection with {name} reset by peer: {e}\")\r\n                        self.clients.remove(client)\r\n                        print_color(f\"Connection with {name} reset by peer: {e}\", \"green\")\r\n                    except Exception as e:\r\n                        logging.error(f\"Error sending data to client {name}: {e}\")\r\n                        self.clients.remove(client)\r\n                        print_color(f\"Error sending data to client {name}: {e}\", \"red\")\r\n\r\n                time.sleep(3)\r\n                for thread in threads:\r\n                    thread.join()\r\n\r\n                #time.sleep(GAME_DURATION)\r\n\r\n                # case 1: no one answered in the current round in 10 seconds\r\n                # behavior: notify all players that no one answered and prepare another question\r\n                if self.clients == self.clients_didnt_answer and not self.get_answer:\r\n                    logging.info(f\"No one answered at round {round}. Preparing another question...\")\r\n                    print_color(\"No one answered. Preparing another question...\", \"cyan\")\r\n                    for name, conn in self.clients:\r\n                        try:\r\n                            logging.info(f\"sending message to client about no answer at {datetime.now()}\")\r\n                            conn.sendall(\"No one answered. Preparing another question....\\n\".encode('utf-8'))\r\n                        except Exception as e:\r\n                            logging.error(f\"Error notifying client - case1 {name}: {e}\")\r\n                            print_color(f\"Error notifying client - case1 {name}: {e}\", \"red\")\r\n                    self.notify_inactive_players(round)\r\n                    time.sleep(1.3)\r\n                    #round += 1\r\n                    continue\r\n                # case 2: some players didn't answer in the current round\r\n                # assumptions: the player didn't answer because of 2 reasons: \r\n                # 1. the player disconnected from the game due to network error in his side\r\n                # 2. the player didn't answer in the current round because he didn't know the answer\r\n                # behavior: based on both assumptions, the server will remove the player from the game\r\n                else: # remove player that didn't answer in the current round\r\n                    for name, conn in self.clients_didnt_answer:\r\n                        try:\r\n                            logging.info(f\"Sending message to client {name} about no answer at {datetime.now()}\")\r\n                            conn.sendall(\"You didn't answer in the current round and are out of the game.\\n\".encode('utf-8'))\r\n                            self.remove_client(conn, name)\r\n                        except socket.error as e:\r\n                            # This exception handles the case where the socket is already closed or unreachable\r\n                            logging.error(f\"Client {name} disconnected from the game due the network error: {e}\")\r\n                            print_color(f\"Client {name} disconnected from the game due the network error: {e}\", \"red\")\r\n                        except Exception as e:\r\n                            logging.error(f\"Unexpected error when trying to close connection with {name}: {e}\")\r\n                            print_color(f\"Unexpected error when trying to close connection with {name}: {e}\", \"red\")\r\n                    time.sleep(1.3)\r\n                    #round += 1\r\n\r\n\r\n\r\n                # maybe replace using set instead of list\r\n                correct_clients = [client for client in self.clients if client[0] in self.correct_answers]\r\n                incorrect_clients = [client for client in self.clients if client[0] not in self.correct_answers and client[0] not in self.clients_didnt_answer]\r\n                self.game_inactive_players.extend(incorrect_clients)\r\n\r\n                # for debug only\r\n                # print(f\"correct_answers: {self.correct_answers}\")\r\n                # print(f\"correct_clients: {correct_clients}\")\r\n                # print(f\"incorrect_clients: {incorrect_clients}\")\r\n                # print(f\"client which didnt answer: {self.clients_didnt_answer}\")\r\n\r\n                # case 7: one player answered incorrectly and the other didn't answer\r\n                # behavior: game over without a winner\r\n                if len(incorrect_clients) == 1 and len(correct_clients) == 0 and len(self.clients_didnt_answer) + len(incorrect_clients) == len(self.clients):\r\n                    incorrect_clients[0][1].sendall(\"You answered incorrectly and are out of the game.\\n\".encode('utf-8'))\r\n                    self.clients=[]\r\n                    time.sleep(1.3)\r\n                    continue\r\n\r\n                # case 3: all players answered incorrectly\r\n                # behavior: notify all players that all answered incorrectly and prepare another question\r\n                if incorrect_clients and not correct_clients and len(incorrect_clients) > 1:  # If all answered incorrectly, do not remove them\r\n                    logging.info(f\"All players answered incorrectly at round {round}. Preparing another question...\")\r\n                    print_color(\"All players answered incorrectly. Preparing another question...\",\"magenta\")\r\n                    for name, conn in incorrect_clients:\r\n                        try:\r\n                            conn.sendall(\"Everyone was wrong. Let's try another question.\\n\".encode('utf-8'))\r\n                        except Exception as e:\r\n                            logging.error(f\"Error notifying client - case2 {name}: {e}\")\r\n                            print_color(f\"Error notifying client - case2 {name}: {e}\", \"red\")\r\n                    time.sleep(1.3)\r\n                    #round += 1\r\n                    continue\r\n\r\n                # case 4: at least one player answered correctly\r\n                # behavior: notify all players that at least one player answered correctly and prepare another question\r\n                else:  # Some players were correct, remove incorrect players\r\n                    for name, conn in incorrect_clients:\r\n                        try:\r\n                            logging.info(f\"Sending message to client {name} about incorrect answer at {datetime.now()}\")\r\n                            conn.sendall(\"You answered incorrectly and are out of the game.\\n\".encode('utf-8'))\r\n                        except Exception as e:\r\n                            logging.info(f\"Error notifying client - case3 {name}: {e}\")\r\n                            print_color(f\"Error notifying client- case3 {name}: {e}\", \"red\")\r\n                    time.sleep(1.3)\r\n                    #round += 1\r\n\r\n                self.clients = correct_clients  # Update the client list to only those who answered correctly\r\n                self.correct_answers= []  # Reset the correct answers list\r\n\r\n\r\n            # handle game end: there are less then 2 players in the game\r\n            else:\r\n                # case 5: only one player left in the game\r\n                # behavior: notify all players who is the winner and close the sockets with all the players\r\n                if len(self.clients) == 1:\r\n                    winner_message=f\"Game over!\\nCongratulations to the winner: {self.clients[0][0]}.\\n\"\r\n                    print_color(winner_message, \"white\")\r\n                    logging.info(winner_message)\r\n                    for client_name, socket_obj in self.origin_clients:\r\n                        try:\r\n                            socket_obj.sendall(winner_message.encode('utf-8'))\r\n                            self.remove_client(socket_obj, client_name)\r\n                        except ConnectionResetError as e:\r\n                            logging.error(f\"Connection with {client_name} reset by peer: {e}\")\r\n                            self.remove_client(socket_obj, client_name)\r\n                        #print(f\"Closing session for {client_name}\\n\")\r\n                        # add error handling in case of fail close\r\n                        print_color(f\"Session for {client_name} closed successfully\", \"green\")\r\n\r\n                # case 6: no one left in the game (no players)\r\n                # behavior: notify all players that there is no winner and close the sockets with all the players\r\n                else:\r\n                    no_winner_message = \"Game over! No winner.\\n\"\r\n                    #print(self.game_characters)\r\n                    print_color(no_winner_message, \"white\")\r\n                    logging.info(no_winner_message)\r\n                    for client_name, socket_obj in self.origin_clients:\r\n                        try:\r\n                            socket_obj.sendall(no_winner_message.encode('utf-8'))\r\n                            self.remove_client(socket_obj, client_name)\r\n                        except ConnectionResetError as e:\r\n                            logging.error(f\"Connection with {client_name} reset by peer: {e}\")\r\n                            self.remove_client(socket_obj, client_name)\r\n                        #print(f\"Closing session for {client_name}\\n\")\r\n                        # add error handling in case of fail close\r\n                        print_color(f\"Session for {client_name} closed successfully\", \"green\")\r\n\r\n                for client in self.clients:\r\n                    client[1].close()  # Close each client's TCP connection\r\n                print_color(\"Game over, sending out offer requests...\", \"cyan\")\r\n\r\n                # init all the variables for the next game\r\n                self.init_struct_for_new_game()\r\n\r\n        except Exception as e:\r\n            logging.error(\"Unexpected error during game start: {}\".format(e))\r\n\r\n\r\n    def init_struct_for_new_game(self):\r\n        self.game_inactive_players = []\r\n        self.origin_clients = []\r\n        self.clients_didnt_answer = []\r\n        self.clients = []\r\n        self.get_answer = False\r\n        self.running = False\r\n        self.game_characters = []\r\n        self.correct_answers = []\r\n        self.start(time.time())\r\n    def handle_client_answer(self, conn, stat, client_name):\r\n        conn.settimeout(GAME_DURATION)  # Set timeout to GAME_DURATION for this client\r\n        try:\r\n            while True:\r\n                try:\r\n                    ans = conn.recv(1024).decode('utf-8').strip()  # Receive answer from client\r\n                except socket.timeout:\r\n                    logging.info(f\"Timeout occurred for {client_name}, no response received.\")\r\n                    break  # Exit the loop, treat as no response\r\n\r\n                # Log the received time for the answer\r\n                received_time = datetime.now()\r\n                logging.info(f\"Received answer '{ans}' from {client_name} at {received_time}\")\r\n                self.get_answer = True\r\n                self.game_characters.append(ans)\r\n\r\n                # Check if the answer is valid\r\n                if ans.lower() in (\"y\", \"t\", \"1\", \"f\", \"n\", \"0\"):\r\n                    if ((ans.lower() in (\"y\", \"t\", \"1\") and stat in TRUE_STATEMENTS) or\r\n                            (ans.lower() in (\"n\", \"f\", \"0\") and stat in FALSE_STATEMENTS)):\r\n                        print_color(f\"{client_name} is correct!\", \"cyan\")\r\n                        logging.info(f\"{client_name} is correct with the answer of {ans}!\")\r\n                        self.correct_answers.append(client_name)\r\n                        self.clients_didnt_answer.remove((client_name, conn))\r\n                        break  # Exit the loop as the client gave a correct response\r\n                    else:\r\n                        logging.info(f\"{client_name} is incorrect the answer of {ans}!\")\r\n                        print_color(f\"{client_name} is incorrect!\", \"magenta\")\r\n                        self.clients_didnt_answer.remove((client_name, conn))\r\n                        break  # Exit the loop as the client gave an incorrect but valid response\r\n                else:\r\n                    print_color(\"Invalid input. Please send 'T' or 'F'.\", \"red\")\r\n                    conn.sendall(\r\n                        \"Invalid input. Please send 'T' or 'F'.\\n\".encode('utf-8'))  # Prompt for correct input\r\n                time.sleep(1.3)\r\n        except Exception as e:\r\n            logging.error(f\"Error while receiving answer from {client_name}: {e}\")\r\n            self.remove_client(conn, client_name)\r\n            # handle_client the case of no one answered\r\n\r\n    def remove_client(self, conn, client_name):\r\n        conn.close()\r\n        self.clients = [(name, sock) for name, sock in self.clients if sock != conn]\r\n        self.origin_clients = [(name, sock) for name, sock in self.origin_clients if sock != conn]\r\n        print_color(f\"Disconnected: {client_name} has been removed from the game.\", \"red\")\r\n        logging.info(f\"Disconnected: {client_name} has been removed from the game.\")\r\n\r\n    def cancel_game_due_to_insufficient_players(self):\r\n        if self.clients:\r\n            client_name, client_conn = self.clients[0]  # Correctly unpack the tuple\r\n            try:\r\n                logging.info(f\"Only one player connected, game canceled.\")\r\n                client_conn.sendall(\"Only one player connected, game canceled.\\n\".encode('utf-8'))\r\n                client_conn.close()  # Use the connection object directly\r\n            except Exception as e:\r\n                logging.error(f\"Error closing connection for {client_name}: {e}\")\r\n        self.running = False\r\n        logging.info(\"Game canceled due to insufficient players.\")\r\n        print_color(\"Game canceled due to insufficient players.\", \"red\")\r\n\r\n    def find_available_port(self,max_attempts=50):\r\n        for attempt in range(max_attempts):\r\n            try:\r\n                # Create a TCP/IP socket\r\n                sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\r\n                # Try to bind the socket to the port\r\n                sock.bind(('localhost', self.starting_port + attempt))\r\n                # If successful, return the port number\r\n                return self.starting_port + attempt\r\n            except socket.error as e:\r\n                logging.info(f\"Port {self.starting_port + attempt} is in use. error info {e}\")\r\n                print_color(f\"Port {self.starting_port + attempt} is in use.\", \"red\")\r\n            finally:\r\n                # Ensure that the socket is closed\r\n                sock.close()\r\n        logging.error(\"Could not find an available port within the range.\")\r\n        raise Exception(\"Could not find an available port within the range.\")\r\n\r\n    def most_frequent_character(char_list):\r\n        # Count frequency of each character in the list\r\n        frequency = {}\r\n        for char in char_list:\r\n            if char in frequency:\r\n                frequency[char] += 1\r\n            else:\r\n                frequency[char] = 1\r\n\r\n        # Find the character with the maximum frequency\r\n        max_freq = 0\r\n        max_char = None\r\n        for char, count in frequency.items():\r\n            if count > max_freq:\r\n                max_freq = count\r\n                max_char = char\r\n\r\n        return max_char\r\n\r\n\r\n# TOP PRIORITY TASKS FOR ALL OF US!\r\n# 1. check the assignment requirements again! every step, everyone by its own!\r\n# 1. בעברית שיהיה ברור: שכל אחד יעבור על כל דרישות העבודה לוודא שכלום לא פוספס\r\n# 2. In your time, run all cases again to identify more bugs\r\n# 3. verify there is no busy waiting in the code, and no 1% usage of the CPU - Barak\r\n\r\n\r\n# sub missions:\r\n# 1. fix bot behavior error handling\r\n# 2. test error handling: data corruption and empty message\r\n# 3. add more comments to the code\r\n# 4. add more exception handling both client and server\r\n# 5. add more print statements/delete unnecessary prints\r\n# 6. details about our mechanisms for each case\r\n# 7. create readme file in the repository that explain all our assumptions, mechanism and architecture - Amit (V)\r\n# 8. verify case when client was wrong and disconnect due to network error - Oded\r\n# 9. in case of duplicate name, the client generate new name and connect to the server\r\n\r\n\r\n# bugs\r\n# clients bugs:\r\n# 1. the client print wired messages: getting 2 broadcast from 2 servers although its the same server(different ips)\r\n# 2. inactive clients prints 2 time the message \"round x but you are out of the game\" - Amit\r\n# 3. In case client type invalid input for the whole round, the server will do hard remove from the game\r\n\r\n\r\n# server bugs:\r\n# print the winner with new line: Charlie is correct!\\nCharlie Wins! instead Charlie is correct! Charlie Wins!\r\n\r\n# FIXED bugs:\r\n# 1. FIXED! handle case of game over: only one player answer incorrectly and the other didn't answer - Amit\r\n# 2. FIXED! the client didn't start listening for offers after the server close connection - Amit\r\n# 3. FIXED! in game with bots, there is no winner in case of one correct answer and all the rest are wrong (basically like 2) - Amit\r\n# 4. FIXED in case of duplicate name, the clients wont stop generating the same name and keep try to connect server - Amit\r\n# 5. FIXED! bot not remove clients from game after first round: test 7 bots client file - Amit\r\n\r\n\r\n# Nice to have\\to consider - please work only if all the bugs are fixed:\r\n# 1. handle case where before game start, the client connect and then disconnect due to network error\r\n# 2. how to identify when client disconnect due to network error or didn't answer\r\n# 3. generate new questions and not hard coded questions, oded suggestion\r\n\r\n\r\n# Scenarios to test:\r\n# All the cases 1-7\r\n# The server disconnect from the clients by shutdown server and then client back to listening for offers - V\r\n# All the client disconnect from the server by shutdown client and then the server will send broadcast message - V\r\n# When game is over both client and server will disconnect from each other and the server will send broadcast message and client will back to listening for offers - V\r\n# Duplicate client name of non bot client in the game\r\n# Duplicate client name of bot client in the game - V\r\n\r\n\r\n# Done\r\n# 1 send message to the client that the game is canceled - bug 1 fixed\r\n# 2 fix bot generating T,F if already deleted from the game - bug 2 fixed\r\n# 3. if port 5555 is taken, the server will try to bind to the next available port\r\n# 4. step 8 from the assignment - send broadcast only or ready to play game again? now the server ready start game again and send broadcast\r\n# 5. step 9 from the assignment\r\n\r\n\r\n\r\n\r\n# mechanisms:\r\n# 1. server disconnect handling: if no answer from the server, the client has timeout of SERVER_NO_RESPONSE_TIMEOUT\r\n# 2. if only one player is connected, the server will wait WAIT_FOR_2_CLIENTS_AT_LEAST and then cancel the game\r\n# 3. when game ended, the server will send broadcast message to all clients and be ready to start a new game (not just broadcast)\r\n# 4. client disconnect handling: if a player didn't answer in the round, he removed from the game completely - try close it session\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Server.py b/Server.py
--- a/Server.py	(revision a6b8f2e9c7fe6baec81eff0fe66d8f04b76a7a87)
+++ b/Server.py	(date 1713639740199)
@@ -175,7 +175,7 @@
                 true_false = (true_statement, false_statement)
                 if round == 1:
                     logging.info(f"Start new game at {datetime.now()}")
-                    message = f"Welcome to the {self.server_name}, where we are answering trivia questions about NBA.\n"
+                    message = f"\033[94mWelcome to the {self.server_name}, where we are answering trivia questions about NBA.\n\033[0m"
                     counter = 1
                     for client in self.clients:
                         message += f"Player {counter} : {client[0]}\n"
@@ -183,7 +183,7 @@
                     message += f" == \n"
                 else:
                     player_names = " and ".join(client[0] for client in self.clients)
-                    message = f"\033[96mRound {round}\033[0m, played by {player_names}:\n"
+                    message = f"\033[94mRound {round}\033[0m, played by {player_names}:\n"
 
                 stat = random.choice(true_false)
                 message += f"\033[93mTrue or False: {stat}\nEnter your answer (T/F):\n\033[0m"
@@ -420,7 +420,7 @@
             client_name, client_conn = self.clients[0]  # Correctly unpack the tuple
             try:
                 logging.info(f"Only one player connected, game canceled.")
-                client_conn.sendall("Only one player connected, game canceled.\n".encode('utf-8'))
+                client_conn.sendall("\033[91mOnly one player connected, game canceled.\n\033[0m".encode('utf-8'))
                 client_conn.close()  # Use the connection object directly
             except Exception as e:
                 logging.error(f"Error closing connection for {client_name}: {e}")
Index: Client.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import os\r\nimport socket\r\nimport threading\r\nimport struct\r\nimport sys\r\nimport random\r\nimport time\r\nimport msvcrt\r\n\r\n\r\nUDP_PORT = 13117\r\nMAGIC_COOKIE = 0xabcddcba\r\nSERVER_ADDRESS = '0.0.0.0'  # For listening for broadcasts\r\nSERVER_NO_RESPONSE_TIMEOUT = 45  # Timeout for server to respond to client connection\r\n\r\n\r\ndef print_color(text, color):\r\n    colors = {\r\n        \"red\": \"\\033[91m\",\r\n        \"green\": \"\\033[92m\",\r\n        \"yellow\": \"\\033[93m\",\r\n        \"blue\": \"\\033[94m\",\r\n        \"magenta\": \"\\033[95m\",\r\n        \"cyan\": \"\\033[96m\",\r\n        \"white\": \"\\033[97m\",\r\n        \"end\": \"\\033[0m\",\r\n    }\r\n    print(colors[color] + text + colors[\"end\"])\r\n\r\nclass TriviaClient:\r\n    def __init__(self, name=None, is_bot=False):\r\n        if is_bot:\r\n            self.name = self.generate_bot_name()\r\n        else:\r\n            self.name = name if name else \"Client\"\r\n\r\n        self.is_bot = is_bot\r\n        self.tcp_socket = None\r\n        self.udp_socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)\r\n        self.udp_socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\r\n        self.udp_socket.setsockopt(socket.SOL_SOCKET, socket.SO_BROADCAST, 1)\r\n        self.udp_socket.bind((SERVER_ADDRESS, UDP_PORT))\r\n        self.tcp_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\r\n        self.name_suffix = 0\r\n        self.server_port = None\r\n        self.running = True\r\n        self.server_found = False\r\n\r\n    def generate_new_name(self):\r\n        \"\"\" Generate a new name by incrementing a suffix. \"\"\"\r\n        self.name_suffix += 1\r\n        self.name = f\"{self.name}_{self.name_suffix}\"\r\n        print(f\"New name generated: {self.name}\")\r\n\r\n    def generate_bot_name(self):\r\n        # Generate a random name from a list of names or by a random string\r\n        names = ['LeBron', 'Kobe', 'Michael', 'Shaquille', 'Tim', 'Dirk', 'Stephen', 'Kevin', 'Kyrie', 'James',\r\n        'Anthony', 'Russell', 'Giannis', 'Carmelo', 'Dwight', 'Chris', 'Damian', 'Blake', 'Paul', 'Derrick',\r\n        'Dwyane', 'Manu', 'Tony', 'Pau', 'Karl', 'John', 'Ray', 'Scottie', 'Charles', 'Patrick',\r\n        'Yao', 'Tracy', 'Grant', 'Penny', 'Vince']\r\n        return f\"BOT_{random.choice(names)}\"\r\n\r\n    def start(self):\r\n        print_color(f\"Client {self.name} started, listening for offer requests...\", \"cyan\")\r\n        threading.Thread(target=self.send_user_input).start()\r\n        self.listen_to_broadcast()\r\n\r\n    def listen_to_broadcast(self):\r\n        while True:\r\n            data, addr = self.udp_socket.recvfrom(1024)\r\n            try:\r\n                magic_cookie, msg_type = struct.unpack(\"!Ib\", data[:5])\r\n                if magic_cookie == MAGIC_COOKIE and msg_type == 0x2:\r\n                    server_name = data[5:37].decode('utf-8').strip()\r\n                    self.server_port = struct.unpack(\"!H\", data[37:39])[0]\r\n                    print_color(f\"Received offer from {server_name} at address {addr[0]}, connecting...\", \"green\")\r\n                    self.connect_to_server((addr[0], self.server_port))\r\n                    break\r\n                time.sleep(1.3)\r\n            except struct.error:\r\n                print_color(\"Received corrupted data\", \"red\")\r\n            except Exception as e:\r\n                print_color(f\"Error while listening for offers: {e}\", \"red\")\r\n            time.sleep(1.3)\r\n\r\n\r\n    def connect_to_server(self, server_addr):\r\n        if self.tcp_socket is None:  # Check if the socket needs to be reinitialized\r\n            self.tcp_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\r\n            self.tcp_socket.settimeout(SERVER_NO_RESPONSE_TIMEOUT)  # Set timeout for response\r\n        try:\r\n            self.tcp_socket.connect(server_addr)\r\n            # set timeout for client is doesnt receive any response from the server\r\n            self.tcp_socket.settimeout(SERVER_NO_RESPONSE_TIMEOUT)\r\n            self.tcp_socket.sendall(f\"{self.name}\\n\".encode('utf-8'))\r\n            if self.is_bot:\r\n                self.bot_behavior()\r\n            else:\r\n                threading.Thread(target=self.receive_server_data).start()\r\n        except socket.error as e:\r\n            print_color(f\"Connection failed: {e}\", \"red\")\r\n            self.close_connection()\r\n        except Exception as e:\r\n            print_color(f\"Error connecting to server: {e}\", \"red\")\r\n            self.tcp_socket.close()  # Ensure the socket is closed on error\r\n            self.tcp_socket = None  # Reset the socket to None after closing\r\n            sys.exit(1)\r\n\r\n    def receive_server_data(self):\r\n        while self.running:\r\n            try:\r\n                data = self.tcp_socket.recv(1024)\r\n                if data:\r\n                    message = data.decode('utf-8')\r\n                    print(data.decode('utf-8'))\r\n                    if \"Name is taken, choose a new one.\" in message:\r\n                        # Name is taken, generate a new one and reconnect\r\n                        self.generate_new_name()\r\n                        self.close_connection()\r\n                    # here we should verify if the name is taken message\r\n                    # then if so, change the self.name to a new name\r\n                    # and again call the function connect_to_server\r\n                else:\r\n                    #print(\"receive_server_data: Server has closed the connection.\")\r\n                    self.close_connection()  # Close on server initiated disconnection\r\n                    break\r\n            except socket.timeout as e:\r\n                # fix this printing\r\n                print_color(\"Timeout! server not reachable\", \"red\")\r\n                #print(\"receive_server_data: Server response timed out. set in the function 'connect_to_server' -> self.tcp_socket.settimeout(40)\")\r\n                self.close_connection()  # Close connection after timeout\r\n                break\r\n            except socket.error as e:\r\n                #print(f\"receive_server_data: Network error: {e}\")\r\n                self.close_connection()  # Close connection on network error\r\n                break\r\n            except RuntimeError as e:\r\n                self.close_connection()\r\n                #print(f\"receive_server_data: Connection closed by server: {e}\")\r\n                break\r\n\r\n    # def send_user_input(self):\r\n    #     while self.running:\r\n    #         try:\r\n    #             if msvcrt.kbhit():\r\n    #                 user_input = msvcrt.getche()\r\n    #                 if user_input == b'\\r':  # Check if the enter key is pressed\r\n    #                     print()  # Move to the next line\r\n    #                     self.tcp_socket.sendall(\r\n    #                         b'\\n')  # Send newline character to server to process the input as completed\r\n    #                 elif user_input == b'\\x03':  # Check for Ctrl+C\r\n    #                     raise KeyboardInterrupt\r\n    #                 else:\r\n    #                     self.tcp_socket.sendall(\r\n    #                         user_input + b'\\n')  # Send each character immediately followed by a newline\r\n    #         except socket.error as e:\r\n    #             print(f\"send_user_input: Network error: {e}\")\r\n    #             self.running = False\r\n    #             self.tcp_socket.close()\r\n    #             os._exit(0)\r\n    #         except KeyboardInterrupt:\r\n    #             print(\"send_user_input: Exiting...\")\r\n    #             self.running = False\r\n    #             self.tcp_socket.close()\r\n    #             os._exit(0)\r\n    #         except Exception as e:\r\n    #             print(f\"send_user_input: Error sending data: {e}\")\r\n    #             self.running = False\r\n    #             self.tcp_socket.close()\r\n    #             os._exit(1)\r\n    #         time.sleep(0.1)\r\n\r\n    def send_user_input(self):\r\n        while self.running:\r\n            try:\r\n                user_input = input()\r\n                self.tcp_socket.sendall(user_input.encode('utf-8') + b'\\n')\r\n                time.sleep(1.3)\r\n            except socket.error as e:\r\n                #print(f\"send_user_input: Network error: {e}\")\r\n                self.running = False\r\n                self.tcp_socket.close()\r\n                os._exit(0)\r\n            except KeyboardInterrupt:\r\n                print_color(\"send_user_input: Exiting...\", \"red\")\r\n                self.running = False\r\n                self.tcp_socket.close()\r\n                os._exit(0)\r\n            except Exception as e:\r\n                #print(f\"send_user_input:Error sending data: {e}\")\r\n                self.running = False\r\n                self.tcp_socket.close()\r\n                os._exit(1)\r\n            time.sleep(1.3)\r\n\r\n    def bot_behavior(self):\r\n        \"\"\"Simulate bot behavior by waiting for a question and then automatically answering.\"\"\"\r\n        print_color(\"Bot behavior started.\", \"green\")\r\n        out_of_game = False  # Flag to indicate whether the bot is out of the game\r\n        while self.running:\r\n            try:\r\n                # Wait for data from the server\r\n                data = self.tcp_socket.recv(1024).decode('utf-8').strip()\r\n                if \"You answered incorrectly and are out of the game.\" in data:\r\n                    print_color(\"You answered incorrectly and are out of the game.\", \"magenta\")\r\n                    out_of_game = True  # Set the flag indicating the bot is out of the game\r\n                    continue  # Continue listening to the server without sending answers\r\n                if f\"Name is taken, choose a new one.\" in data:\r\n                    # Name is taken, generate a new one and reconnect\r\n                    new_bot_name=self.generate_bot_name()\r\n                    print_color(f\"Name {self.name} is taken, changing to {new_bot_name}\", \"yellow\")\r\n                    self.name = new_bot_name\r\n                    self.close_connection()\r\n                if data:\r\n                    print(data)  # Print the received message\r\n                    # Only generate an answer if not out of the game\r\n                    if not out_of_game:\r\n                        # Simulate thinking time before sending an answer\r\n                        time.sleep(random.uniform(0.5, 2))\r\n                        answer = random.choice(['T', 'F'])  # Randomly choose an answer\r\n                        print(f\"Bot {self.name} answering: {answer}\")\r\n                        self.tcp_socket.sendall(answer.encode('utf-8') + b'\\n')\r\n            except socket.timeout:\r\n                print(\r\n                    \"Server response timed out. set in the function 'connect_to_server' -> self.tcp_socket.settimeout(40)\")\r\n                self.close_connection()  # Close connection after timeout\r\n                break\r\n            except socket.error as e:\r\n                #print(f\"Network error: {e}\")\r\n                self.close_connection()  # Close connection on network error\r\n                break\r\n            except RuntimeError as e:\r\n                self.close_connection()\r\n                #print(f\"Connection closed by server: {e}\")\r\n                break\r\n        else:\r\n            self.close_connection()\r\n\r\n    def close_connection(self):\r\n        #print(\"Server disconnected, attempting to close connection and restart broadcasting...\")\r\n        self.running = False  # Stop the client's operations temporarily to reset connections\r\n\r\n        try:\r\n            if self.tcp_socket is not None:\r\n                self.tcp_socket.close()\r\n                # print(\"TCP socket closed successfully.\")\r\n        except socket.error as e:\r\n            print_color(f\"Error closing TCP socket: {e}\", \"red\")\r\n        except Exception as e:\r\n            print_color(f\"Unexpected error when closing TCP socket: {e}\", \"red\")\r\n        finally:\r\n            self.tcp_socket = None  # Ensure the socket is reset\r\n\r\n        # Properly close the UDP socket before re-initializing it\r\n        try:\r\n            if self.udp_socket is not None:\r\n                self.udp_socket.close()\r\n                # print(\"UDP socket closed successfully.\")\r\n        except socket.error as e:\r\n            print_color(f\"Error closing UDP socket: {e}\", \"red\")\r\n        except Exception as e:\r\n            print(f\"Unexpected error when closing UDP socket: {e}\", \"red\")\r\n\r\n        # Reinitialize the UDP socket\r\n        try:\r\n            self.udp_socket.close()\r\n            self.udp_socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)\r\n            self.udp_socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\r\n            self.udp_socket.setsockopt(socket.SOL_SOCKET, socket.SO_BROADCAST, 1)\r\n            self.udp_socket.bind((SERVER_ADDRESS, UDP_PORT))\r\n            # print(\"UDP socket reinitialized successfully.\")\r\n        except socket.error as e:\r\n            print_color(f\"Error reinitializing UDP socket: {e}\", \"red\")\r\n            return  # Stop attempting to restart if socket initialization fails\r\n\r\n        # Attempt to restart the server activities\r\n        try:\r\n            self.running = True\r\n            print_color(\"Server disconnected, listening for offer requests....\", \"blue\")\r\n            self.listen_to_broadcast()  # Restart listening for UDP broadcasts\r\n        except Exception as e:\r\n            #print(f\"Error restarting broadcast listening: {e}\")\r\n            self.running = False  # Ensure the client does not continue in an erroneous state\r\n\r\n    # def close_connection(self):\r\n    #     print(\"Server disconnected, listening for offer requests...\")\r\n    #     self.running = False\r\n    #     self.tcp_socket.close()\r\n    #     self.tcp_socket = None  # Reset the socket\r\n    #     self.running = True\r\n    #     self.listen_to_broadcast()  # Restart listening for UDP broadcasts\r\n\r\n\r\n\r\n\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Client.py b/Client.py
--- a/Client.py	(revision a6b8f2e9c7fe6baec81eff0fe66d8f04b76a7a87)
+++ b/Client.py	(date 1713639214599)
@@ -61,7 +61,7 @@
         return f"BOT_{random.choice(names)}"
 
     def start(self):
-        print_color(f"Client {self.name} started, listening for offer requests...", "cyan")
+        print(f"Client {self.name} started, listening for offer requests...")
         threading.Thread(target=self.send_user_input).start()
         self.listen_to_broadcast()
 
Index: server.log
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/server.log b/server.log
--- a/server.log	(revision a6b8f2e9c7fe6baec81eff0fe66d8f04b76a7a87)
+++ b/server.log	(date 1713639850635)
@@ -7497,3 +7497,441 @@
 2024-04-20 21:42:13,316:ERROR:Accepting new client timed out: timed out
 2024-04-20 21:42:13,316:INFO:Only one player connected, game canceled.
 2024-04-20 21:42:13,316:INFO:Game canceled due to insufficient players.
+2024-04-20 21:48:21,867:INFO:Game started at 2024-04-20 21:48:21.867309
+2024-04-20 21:48:21,870:INFO:New client 192.168.0.105 connected.
+2024-04-20 21:48:21,870:INFO:Team BOT_Chris connected from 192.168.0.105
+2024-04-20 21:48:24,494:INFO:New client 192.168.0.105 connected.
+2024-04-20 21:48:24,495:INFO:Team BOT_Kyrie connected from 192.168.0.105
+2024-04-20 21:48:27,109:INFO:New client 192.168.0.105 connected.
+2024-04-20 21:48:27,109:INFO:Team BOT_Dirk connected from 192.168.0.105
+2024-04-20 21:48:29,734:INFO:New client 192.168.0.105 connected.
+2024-04-20 21:48:29,734:INFO:Team BOT_Patrick connected from 192.168.0.105
+2024-04-20 21:48:32,359:INFO:New client 192.168.0.105 connected.
+2024-04-20 21:48:32,361:INFO:Team BOT_Dwyane connected from 192.168.0.105
+2024-04-20 21:48:34,984:INFO:New client 192.168.0.105 connected.
+2024-04-20 21:48:34,985:INFO:Team BOT_Yao connected from 192.168.0.105
+2024-04-20 21:48:37,593:INFO:New client 192.168.0.105 connected.
+2024-04-20 21:48:37,593:INFO:Team BOT_Ray connected from 192.168.0.105
+2024-04-20 21:48:50,219:ERROR:Accepting new client timed out: timed out
+2024-04-20 21:48:50,219:INFO:Start new game at 2024-04-20 21:48:50.219969
+2024-04-20 21:48:50,219:INFO:The asked question of round 1 is The Los Angeles Lakers have won 17 NBA championships.
+2024-04-20 21:48:51,313:INFO:Received answer 'T' from BOT_Chris at 2024-04-20 21:48:51.313344
+2024-04-20 21:48:51,313:INFO:BOT_Chris is correct with the answer of T!
+2024-04-20 21:48:51,345:INFO:Received answer 'F' from BOT_Dirk at 2024-04-20 21:48:51.345751
+2024-04-20 21:48:51,345:INFO:BOT_Dirk is incorrect the answer of F!
+2024-04-20 21:48:51,440:INFO:Received answer 'T' from BOT_Kyrie at 2024-04-20 21:48:51.440262
+2024-04-20 21:48:51,440:INFO:BOT_Kyrie is correct with the answer of T!
+2024-04-20 21:48:51,609:INFO:Received answer 'T' from BOT_Dwyane at 2024-04-20 21:48:51.609665
+2024-04-20 21:48:51,609:INFO:BOT_Dwyane is correct with the answer of T!
+2024-04-20 21:48:51,704:INFO:Received answer 'F' from BOT_Patrick at 2024-04-20 21:48:51.704422
+2024-04-20 21:48:51,704:INFO:BOT_Patrick is incorrect the answer of F!
+2024-04-20 21:48:51,987:INFO:Received answer 'F' from BOT_Yao at 2024-04-20 21:48:51.987525
+2024-04-20 21:48:51,987:INFO:BOT_Yao is incorrect the answer of F!
+2024-04-20 21:48:52,176:INFO:Received answer 'F' from BOT_Ray at 2024-04-20 21:48:52.176422
+2024-04-20 21:48:52,176:INFO:BOT_Ray is incorrect the answer of F!
+2024-04-20 21:48:54,533:INFO:Sending message to client BOT_Dirk about incorrect answer at 2024-04-20 21:48:54.533681
+2024-04-20 21:48:54,534:INFO:Sending message to client BOT_Patrick about incorrect answer at 2024-04-20 21:48:54.534683
+2024-04-20 21:48:54,534:INFO:Sending message to client BOT_Yao about incorrect answer at 2024-04-20 21:48:54.534683
+2024-04-20 21:48:54,534:INFO:Sending message to client BOT_Ray about incorrect answer at 2024-04-20 21:48:54.534683
+2024-04-20 21:48:55,845:INFO:The asked question of round 2 is The New York Knicks won the NBA Championship in 2012.
+2024-04-20 21:48:56,560:INFO:Received answer 'T' from BOT_Chris at 2024-04-20 21:48:56.560384
+2024-04-20 21:48:56,561:INFO:BOT_Chris is incorrect the answer of T!
+2024-04-20 21:48:57,593:INFO:Received answer 'F' from BOT_Kyrie at 2024-04-20 21:48:57.593908
+2024-04-20 21:48:57,594:INFO:BOT_Kyrie is correct with the answer of F!
+2024-04-20 21:48:57,688:INFO:Received answer 'F' from BOT_Dwyane at 2024-04-20 21:48:57.688842
+2024-04-20 21:48:57,688:INFO:BOT_Dwyane is correct with the answer of F!
+2024-04-20 21:49:00,169:INFO:Sending message to client BOT_Chris about incorrect answer at 2024-04-20 21:49:00.169406
+2024-04-20 21:49:01,471:INFO:The asked question of round 3 is Kevin Durant won his first NBA championship with the Oklahoma City Thunder.
+2024-04-20 21:49:02,020:INFO:Received answer 'F' from BOT_Kyrie at 2024-04-20 21:49:02.020459
+2024-04-20 21:49:02,021:INFO:BOT_Kyrie is correct with the answer of F!
+2024-04-20 21:49:02,082:INFO:Received answer 'F' from BOT_Dwyane at 2024-04-20 21:49:02.082410
+2024-04-20 21:49:02,083:INFO:BOT_Dwyane is correct with the answer of F!
+2024-04-20 21:49:07,089:INFO:The asked question of round 4 is LeBron James was drafted first overall in 2003.
+2024-04-20 21:49:08,213:INFO:Received answer 'T' from BOT_Kyrie at 2024-04-20 21:49:08.213307
+2024-04-20 21:49:08,213:INFO:BOT_Kyrie is correct with the answer of T!
+2024-04-20 21:49:08,555:INFO:Received answer 'F' from BOT_Dwyane at 2024-04-20 21:49:08.555927
+2024-04-20 21:49:08,555:INFO:BOT_Dwyane is incorrect the answer of F!
+2024-04-20 21:49:11,395:INFO:Sending message to client BOT_Dwyane about incorrect answer at 2024-04-20 21:49:11.395326
+2024-04-20 21:49:12,705:INFO:Game over!
+Congratulations to the winner: BOT_Kyrie.
+
+2024-04-20 21:49:12,705:INFO:Disconnected: BOT_Chris has been removed from the game.
+2024-04-20 21:49:12,706:INFO:Disconnected: BOT_Kyrie has been removed from the game.
+2024-04-20 21:49:12,706:INFO:Disconnected: BOT_Dirk has been removed from the game.
+2024-04-20 21:49:12,707:INFO:Disconnected: BOT_Patrick has been removed from the game.
+2024-04-20 21:49:12,708:INFO:Disconnected: BOT_Dwyane has been removed from the game.
+2024-04-20 21:49:12,721:INFO:Disconnected: BOT_Yao has been removed from the game.
+2024-04-20 21:49:12,721:INFO:Disconnected: BOT_Ray has been removed from the game.
+2024-04-20 21:49:12,721:INFO:Game started at 2024-04-20 21:49:12.721606
+2024-04-20 21:49:14,043:INFO:New client 192.168.0.105 connected.
+2024-04-20 21:49:14,043:INFO:Team BOT_Kyrie connected from 192.168.0.105
+2024-04-20 21:49:26,658:ERROR:Accepting new client timed out: timed out
+2024-04-20 21:49:37,975:ERROR:Accepting new client timed out: timed out
+2024-04-20 21:49:37,975:INFO:Only one player connected, game canceled.
+2024-04-20 21:49:37,975:INFO:Game canceled due to insufficient players.
+2024-04-20 21:51:45,544:INFO:Game started at 2024-04-20 21:51:45.544766
+2024-04-20 21:51:45,548:INFO:New client 192.168.0.105 connected.
+2024-04-20 21:51:45,548:INFO:Team BOT_Ray connected from 192.168.0.105
+2024-04-20 21:51:48,167:INFO:New client 192.168.0.105 connected.
+2024-04-20 21:51:48,168:INFO:Team BOT_Karl connected from 192.168.0.105
+2024-04-20 21:51:50,794:INFO:New client 192.168.0.105 connected.
+2024-04-20 21:51:50,795:INFO:Team BOT_Chris connected from 192.168.0.105
+2024-04-20 21:51:53,406:INFO:New client 192.168.0.105 connected.
+2024-04-20 21:51:53,406:INFO:Team BOT_Tony connected from 192.168.0.105
+2024-04-20 21:51:56,037:INFO:New client 192.168.0.105 connected.
+2024-04-20 21:51:56,038:INFO:Team BOT_Derrick connected from 192.168.0.105
+2024-04-20 21:51:58,658:INFO:New client 192.168.0.105 connected.
+2024-04-20 21:51:58,660:INFO:Team BOT_Giannis connected from 192.168.0.105
+2024-04-20 21:52:01,273:INFO:New client 192.168.0.105 connected.
+2024-04-20 21:52:01,274:INFO:Team BOT_Russell connected from 192.168.0.105
+2024-04-20 21:52:13,913:ERROR:Accepting new client timed out: timed out
+2024-04-20 21:52:13,913:INFO:Start new game at 2024-04-20 21:52:13.913118
+2024-04-20 21:52:13,913:INFO:The asked question of round 1 is The Miami Heat was established in 1970.
+2024-04-20 21:52:14,459:INFO:Received answer 'F' from BOT_Russell at 2024-04-20 21:52:14.458853
+2024-04-20 21:52:14,459:INFO:BOT_Russell is correct with the answer of F!
+2024-04-20 21:52:14,662:INFO:Received answer 'F' from BOT_Chris at 2024-04-20 21:52:14.662871
+2024-04-20 21:52:14,662:INFO:BOT_Chris is correct with the answer of F!
+2024-04-20 21:52:14,786:INFO:Received answer 'T' from BOT_Tony at 2024-04-20 21:52:14.786633
+2024-04-20 21:52:14,786:INFO:BOT_Tony is incorrect the answer of T!
+2024-04-20 21:52:14,973:INFO:Received answer 'F' from BOT_Derrick at 2024-04-20 21:52:14.973405
+2024-04-20 21:52:14,974:INFO:BOT_Derrick is correct with the answer of F!
+2024-04-20 21:52:15,146:INFO:Received answer 'T' from BOT_Ray at 2024-04-20 21:52:15.146401
+2024-04-20 21:52:15,146:INFO:BOT_Ray is incorrect the answer of T!
+2024-04-20 21:52:15,785:INFO:Received answer 'T' from BOT_Giannis at 2024-04-20 21:52:15.785959
+2024-04-20 21:52:15,785:INFO:BOT_Giannis is incorrect the answer of T!
+2024-04-20 21:52:15,848:INFO:Received answer 'F' from BOT_Karl at 2024-04-20 21:52:15.848816
+2024-04-20 21:52:15,848:INFO:BOT_Karl is correct with the answer of F!
+2024-04-20 21:52:18,224:INFO:Sending message to client BOT_Ray about incorrect answer at 2024-04-20 21:52:18.224121
+2024-04-20 21:52:18,224:INFO:Sending message to client BOT_Tony about incorrect answer at 2024-04-20 21:52:18.224121
+2024-04-20 21:52:18,224:INFO:Sending message to client BOT_Giannis about incorrect answer at 2024-04-20 21:52:18.224121
+2024-04-20 21:52:19,527:INFO:The asked question of round 2 is The Toronto Raptors won their first NBA Championship in 2019.
+2024-04-20 21:52:20,199:INFO:Received answer 'T' from BOT_Derrick at 2024-04-20 21:52:20.198625
+2024-04-20 21:52:20,199:INFO:BOT_Derrick is correct with the answer of T!
+2024-04-20 21:52:20,788:INFO:Received answer 'F' from BOT_Karl at 2024-04-20 21:52:20.788921
+2024-04-20 21:52:20,789:INFO:BOT_Karl is incorrect the answer of F!
+2024-04-20 21:52:20,962:INFO:Received answer 'T' from BOT_Chris at 2024-04-20 21:52:20.962452
+2024-04-20 21:52:20,962:INFO:BOT_Chris is correct with the answer of T!
+2024-04-20 21:52:21,476:INFO:Received answer 'F' from BOT_Russell at 2024-04-20 21:52:21.476826
+2024-04-20 21:52:21,477:INFO:BOT_Russell is incorrect the answer of F!
+2024-04-20 21:52:23,855:INFO:Sending message to client BOT_Karl about incorrect answer at 2024-04-20 21:52:23.855742
+2024-04-20 21:52:23,855:INFO:Sending message to client BOT_Russell about incorrect answer at 2024-04-20 21:52:23.855742
+2024-04-20 21:52:25,169:INFO:The asked question of round 3 is Tim Duncan won five NBA championships with the San Antonio Spurs.
+2024-04-20 21:52:26,979:INFO:Received answer 'F' from BOT_Derrick at 2024-04-20 21:52:26.979039
+2024-04-20 21:52:26,979:INFO:BOT_Derrick is incorrect the answer of F!
+2024-04-20 21:52:27,086:INFO:Received answer 'T' from BOT_Chris at 2024-04-20 21:52:27.086724
+2024-04-20 21:52:27,087:INFO:BOT_Chris is correct with the answer of T!
+2024-04-20 21:52:29,491:INFO:Sending message to client BOT_Derrick about incorrect answer at 2024-04-20 21:52:29.491967
+2024-04-20 21:52:30,803:INFO:Game over!
+Congratulations to the winner: BOT_Chris.
+
+2024-04-20 21:52:30,804:INFO:Disconnected: BOT_Ray has been removed from the game.
+2024-04-20 21:52:30,804:INFO:Disconnected: BOT_Karl has been removed from the game.
+2024-04-20 21:52:30,804:INFO:Disconnected: BOT_Chris has been removed from the game.
+2024-04-20 21:52:30,805:INFO:Disconnected: BOT_Tony has been removed from the game.
+2024-04-20 21:52:30,805:INFO:Disconnected: BOT_Derrick has been removed from the game.
+2024-04-20 21:52:30,806:INFO:Disconnected: BOT_Giannis has been removed from the game.
+2024-04-20 21:52:30,812:INFO:Disconnected: BOT_Russell has been removed from the game.
+2024-04-20 21:52:30,819:INFO:Game started at 2024-04-20 21:52:30.819632
+2024-04-20 21:52:32,137:INFO:New client 192.168.0.105 connected.
+2024-04-20 21:52:32,137:INFO:Team BOT_Chris connected from 192.168.0.105
+2024-04-20 21:52:42,627:INFO:New client 192.168.0.105 connected.
+2024-04-20 21:52:42,628:INFO:Team BOT_Anthony connected from 192.168.0.105
+2024-04-20 21:52:44,208:INFO:Game started at 2024-04-20 21:52:44.208217
+2024-04-20 21:52:44,212:INFO:New client 192.168.0.105 connected.
+2024-04-20 21:52:44,212:INFO:Team BOT_Dirk connected from 192.168.0.105
+2024-04-20 21:52:46,826:INFO:New client 192.168.0.105 connected.
+2024-04-20 21:52:46,828:INFO:Team BOT_Kyrie connected from 192.168.0.105
+2024-04-20 21:52:49,440:INFO:New client 192.168.0.105 connected.
+2024-04-20 21:52:49,441:INFO:Team BOT_Dwyane connected from 192.168.0.105
+2024-04-20 21:52:52,053:INFO:New client 192.168.0.105 connected.
+2024-04-20 21:52:52,054:ERROR:Socket error with 192.168.0.105: [WinError 10054] An existing connection was forcibly closed by the remote host
+2024-04-20 21:53:34,682:INFO:Game started at 2024-04-20 21:53:34.682973
+2024-04-20 21:53:34,686:INFO:New client 192.168.0.105 connected.
+2024-04-20 21:53:34,686:INFO:Team BOT_Kevin connected from 192.168.0.105
+2024-04-20 21:53:37,309:INFO:New client 192.168.0.105 connected.
+2024-04-20 21:53:37,309:INFO:Team BOT_Kyrie connected from 192.168.0.105
+2024-04-20 21:53:39,919:INFO:New client 192.168.0.105 connected.
+2024-04-20 21:53:39,920:INFO:Team BOT_Damian connected from 192.168.0.105
+2024-04-20 21:53:42,537:INFO:New client 192.168.0.105 connected.
+2024-04-20 21:53:42,538:INFO:Team BOT_James connected from 192.168.0.105
+2024-04-20 21:53:45,157:INFO:New client 192.168.0.105 connected.
+2024-04-20 21:53:45,159:INFO:Team BOT_Pau connected from 192.168.0.105
+2024-04-20 21:53:47,783:INFO:New client 192.168.0.105 connected.
+2024-04-20 21:53:47,783:INFO:Team BOT_Manu connected from 192.168.0.105
+2024-04-20 21:53:50,394:INFO:New client 192.168.0.105 connected.
+2024-04-20 21:53:50,394:WARNING:Duplicate name BOT_Manu attempt from 192.168.0.105 denied.
+2024-04-20 21:53:53,003:INFO:New client 192.168.0.105 connected.
+2024-04-20 21:53:53,004:INFO:Team BOT_Patrick connected from 192.168.0.105
+2024-04-20 21:54:05,631:ERROR:Accepting new client timed out: timed out
+2024-04-20 21:54:05,631:INFO:Start new game at 2024-04-20 21:54:05.631072
+2024-04-20 21:54:05,631:INFO:The asked question of round 1 is The NBA was founded in 1949 as the National Basketball Association.
+2024-04-20 21:54:06,493:INFO:Received answer 'F' from BOT_Kyrie at 2024-04-20 21:54:06.492818
+2024-04-20 21:54:06,493:INFO:BOT_Kyrie is correct with the answer of F!
+2024-04-20 21:54:06,539:INFO:Received answer 'T' from BOT_Pau at 2024-04-20 21:54:06.539503
+2024-04-20 21:54:06,540:INFO:BOT_Pau is incorrect the answer of T!
+2024-04-20 21:54:06,617:INFO:Received answer 'F' from BOT_James at 2024-04-20 21:54:06.617632
+2024-04-20 21:54:06,618:INFO:BOT_James is correct with the answer of F!
+2024-04-20 21:54:06,745:INFO:Received answer 'T' from BOT_Patrick at 2024-04-20 21:54:06.745166
+2024-04-20 21:54:06,745:INFO:BOT_Patrick is incorrect the answer of T!
+2024-04-20 21:54:06,854:INFO:Received answer 'T' from BOT_Kevin at 2024-04-20 21:54:06.854622
+2024-04-20 21:54:06,854:INFO:BOT_Kevin is incorrect the answer of T!
+2024-04-20 21:54:07,358:INFO:Received answer 'T' from BOT_Damian at 2024-04-20 21:54:07.358932
+2024-04-20 21:54:07,360:INFO:BOT_Damian is incorrect the answer of T!
+2024-04-20 21:54:07,549:INFO:Received answer 'F' from BOT_Manu at 2024-04-20 21:54:07.549732
+2024-04-20 21:54:07,550:INFO:BOT_Manu is correct with the answer of F!
+2024-04-20 21:54:09,938:INFO:Sending message to client BOT_Kevin about incorrect answer at 2024-04-20 21:54:09.938320
+2024-04-20 21:54:09,938:INFO:Sending message to client BOT_Damian about incorrect answer at 2024-04-20 21:54:09.938320
+2024-04-20 21:54:09,939:INFO:Sending message to client BOT_Pau about incorrect answer at 2024-04-20 21:54:09.939320
+2024-04-20 21:54:09,939:INFO:Sending message to client BOT_Patrick about incorrect answer at 2024-04-20 21:54:09.939320
+2024-04-20 21:54:11,241:INFO:The asked question of round 2 is LeBron James was drafted first overall in 2003.
+2024-04-20 21:54:11,847:INFO:Received answer 'F' from BOT_James at 2024-04-20 21:54:11.847059
+2024-04-20 21:54:11,847:INFO:BOT_James is incorrect the answer of F!
+2024-04-20 21:54:11,924:INFO:Received answer 'F' from BOT_Kyrie at 2024-04-20 21:54:11.924899
+2024-04-20 21:54:11,925:INFO:BOT_Kyrie is incorrect the answer of F!
+2024-04-20 21:54:12,049:INFO:Received answer 'F' from BOT_Manu at 2024-04-20 21:54:12.049167
+2024-04-20 21:54:12,050:INFO:BOT_Manu is incorrect the answer of F!
+2024-04-20 21:54:15,566:INFO:All players answered incorrectly at round 3. Preparing another question...
+2024-04-20 21:54:16,873:INFO:The asked question of round 3 is LeBron James was drafted first overall in 2003.
+2024-04-20 21:54:16,876:INFO:Received answer 'F' from BOT_James at 2024-04-20 21:54:16.875789
+2024-04-20 21:54:16,876:INFO:BOT_James is incorrect the answer of F!
+2024-04-20 21:54:17,497:INFO:Received answer 'F' from BOT_Manu at 2024-04-20 21:54:17.497625
+2024-04-20 21:54:17,498:INFO:BOT_Manu is incorrect the answer of F!
+2024-04-20 21:54:17,513:INFO:Received answer 'T' from BOT_Kyrie at 2024-04-20 21:54:17.513686
+2024-04-20 21:54:17,514:INFO:BOT_Kyrie is correct with the answer of T!
+2024-04-20 21:54:21,190:INFO:Sending message to client BOT_James about incorrect answer at 2024-04-20 21:54:21.190553
+2024-04-20 21:54:21,191:INFO:Sending message to client BOT_Manu about incorrect answer at 2024-04-20 21:54:21.191548
+2024-04-20 21:54:22,500:INFO:Game over!
+Congratulations to the winner: BOT_Kyrie.
+
+2024-04-20 21:54:22,501:INFO:Disconnected: BOT_Kevin has been removed from the game.
+2024-04-20 21:54:22,501:INFO:Disconnected: BOT_Kyrie has been removed from the game.
+2024-04-20 21:54:22,502:INFO:Disconnected: BOT_Damian has been removed from the game.
+2024-04-20 21:54:22,503:INFO:Disconnected: BOT_James has been removed from the game.
+2024-04-20 21:54:22,503:INFO:Disconnected: BOT_Pau has been removed from the game.
+2024-04-20 21:54:22,503:INFO:Disconnected: BOT_Manu has been removed from the game.
+2024-04-20 21:54:22,504:INFO:Disconnected: BOT_Patrick has been removed from the game.
+2024-04-20 21:54:22,504:INFO:Game started at 2024-04-20 21:54:22.504670
+2024-04-20 21:54:22,511:INFO:New client 192.168.0.105 connected.
+2024-04-20 21:54:22,531:INFO:Team BOT_Manu connected from 192.168.0.105
+2024-04-20 21:54:25,127:INFO:New client 192.168.0.105 connected.
+2024-04-20 21:54:25,127:INFO:Team BOT_James connected from 192.168.0.105
+2024-04-20 21:54:27,744:INFO:New client 192.168.0.105 connected.
+2024-04-20 21:54:27,745:INFO:Team BOT_Kyrie connected from 192.168.0.105
+2024-04-20 21:54:40,388:ERROR:Accepting new client timed out: timed out
+2024-04-20 21:54:40,388:INFO:Start new game at 2024-04-20 21:54:40.388608
+2024-04-20 21:54:40,388:INFO:The asked question of round 1 is LeBron James has never won an NBA MVP award.
+2024-04-20 21:54:40,990:INFO:Received answer 'F' from BOT_Kyrie at 2024-04-20 21:54:40.990547
+2024-04-20 21:54:40,990:INFO:BOT_Kyrie is correct with the answer of F!
+2024-04-20 21:54:42,322:INFO:Received answer 'T' from BOT_James at 2024-04-20 21:54:42.322777
+2024-04-20 21:54:42,322:INFO:BOT_James is incorrect the answer of T!
+2024-04-20 21:54:42,354:INFO:Received answer 'T' from BOT_Manu at 2024-04-20 21:54:42.354256
+2024-04-20 21:54:42,354:INFO:BOT_Manu is incorrect the answer of T!
+2024-04-20 21:54:44,715:INFO:Sending message to client BOT_Manu about incorrect answer at 2024-04-20 21:54:44.715651
+2024-04-20 21:54:44,715:INFO:Sending message to client BOT_James about incorrect answer at 2024-04-20 21:54:44.715651
+2024-04-20 21:54:46,028:INFO:Game over!
+Congratulations to the winner: BOT_Kyrie.
+
+2024-04-20 21:54:46,028:INFO:Disconnected: BOT_Manu has been removed from the game.
+2024-04-20 21:54:46,029:INFO:Disconnected: BOT_James has been removed from the game.
+2024-04-20 21:54:46,029:INFO:Disconnected: BOT_Kyrie has been removed from the game.
+2024-04-20 21:54:46,029:INFO:Game started at 2024-04-20 21:54:46.029523
+2024-04-20 21:54:48,646:INFO:New client 192.168.0.105 connected.
+2024-04-20 21:54:48,646:INFO:Team BOT_Kyrie connected from 192.168.0.105
+2024-04-20 21:55:01,287:ERROR:Accepting new client timed out: timed out
+2024-04-20 21:55:12,603:ERROR:Accepting new client timed out: timed out
+2024-04-20 21:55:12,603:INFO:Only one player connected, game canceled.
+2024-04-20 21:55:12,603:INFO:Game canceled due to insufficient players.
+2024-04-20 21:58:25,255:INFO:Game started at 2024-04-20 21:58:25.255077
+2024-04-20 21:58:25,259:INFO:New client 192.168.0.105 connected.
+2024-04-20 21:58:25,259:INFO:Team BOT_Blake connected from 192.168.0.105
+2024-04-20 21:58:27,878:INFO:New client 192.168.0.105 connected.
+2024-04-20 21:58:27,878:INFO:Team BOT_Kyrie connected from 192.168.0.105
+2024-04-20 21:58:30,501:INFO:New client 192.168.0.105 connected.
+2024-04-20 21:58:30,503:INFO:Team BOT_Charles connected from 192.168.0.105
+2024-04-20 21:58:33,125:INFO:New client 192.168.0.105 connected.
+2024-04-20 21:58:33,126:INFO:Team BOT_Manu connected from 192.168.0.105
+2024-04-20 21:58:35,746:INFO:New client 192.168.0.105 connected.
+2024-04-20 21:58:35,747:INFO:Team BOT_Kevin connected from 192.168.0.105
+2024-04-20 21:58:38,367:INFO:New client 192.168.0.105 connected.
+2024-04-20 21:58:38,369:WARNING:Duplicate name BOT_Kyrie attempt from 192.168.0.105 denied.
+2024-04-20 21:58:40,988:INFO:New client 192.168.0.105 connected.
+2024-04-20 21:58:40,988:INFO:Team BOT_Patrick connected from 192.168.0.105
+2024-04-20 21:58:43,592:INFO:New client 192.168.0.105 connected.
+2024-04-20 21:58:43,594:INFO:Team BOT_Damian connected from 192.168.0.105
+2024-04-20 21:58:56,221:ERROR:Accepting new client timed out: timed out
+2024-04-20 21:58:56,221:INFO:Start new game at 2024-04-20 21:58:56.221325
+2024-04-20 21:58:56,221:INFO:The asked question of round 1 is LeBron James has never won an NBA MVP award.
+2024-04-20 21:58:56,771:INFO:Received answer 'T' from BOT_Charles at 2024-04-20 21:58:56.771339
+2024-04-20 21:58:56,771:INFO:BOT_Charles is incorrect the answer of T!
+2024-04-20 21:58:56,830:INFO:Received answer 'F' from BOT_Kyrie at 2024-04-20 21:58:56.830672
+2024-04-20 21:58:56,830:INFO:BOT_Kyrie is correct with the answer of F!
+2024-04-20 21:58:56,971:INFO:Received answer 'T' from BOT_Damian at 2024-04-20 21:58:56.970696
+2024-04-20 21:58:56,971:INFO:BOT_Damian is incorrect the answer of T!
+2024-04-20 21:58:56,986:INFO:Received answer 'F' from BOT_Manu at 2024-04-20 21:58:56.986697
+2024-04-20 21:58:56,986:INFO:BOT_Manu is correct with the answer of F!
+2024-04-20 21:58:57,066:INFO:Received answer 'F' from BOT_Blake at 2024-04-20 21:58:57.066250
+2024-04-20 21:58:57,066:INFO:BOT_Blake is correct with the answer of F!
+2024-04-20 21:58:57,488:INFO:Received answer 'T' from BOT_Patrick at 2024-04-20 21:58:57.488111
+2024-04-20 21:58:57,489:INFO:BOT_Patrick is incorrect the answer of T!
+2024-04-20 21:58:57,923:INFO:Received answer 'F' from BOT_Kevin at 2024-04-20 21:58:57.923562
+2024-04-20 21:58:57,924:INFO:BOT_Kevin is correct with the answer of F!
+2024-04-20 21:59:00,547:INFO:Sending message to client BOT_Charles about incorrect answer at 2024-04-20 21:59:00.547415
+2024-04-20 21:59:00,548:INFO:Sending message to client BOT_Patrick about incorrect answer at 2024-04-20 21:59:00.548425
+2024-04-20 21:59:00,548:INFO:Sending message to client BOT_Damian about incorrect answer at 2024-04-20 21:59:00.548425
+2024-04-20 21:59:01,856:INFO:The asked question of round 2 is The Miami Heat was established in 1970.
+2024-04-20 21:59:02,388:INFO:Received answer 'F' from BOT_Blake at 2024-04-20 21:59:02.388191
+2024-04-20 21:59:02,388:INFO:BOT_Blake is correct with the answer of F!
+2024-04-20 21:59:02,701:INFO:Received answer 'F' from BOT_Manu at 2024-04-20 21:59:02.701453
+2024-04-20 21:59:02,702:INFO:BOT_Manu is correct with the answer of F!
+2024-04-20 21:59:02,810:INFO:Received answer 'F' from BOT_Kyrie at 2024-04-20 21:59:02.810687
+2024-04-20 21:59:02,811:INFO:BOT_Kyrie is correct with the answer of F!
+2024-04-20 21:59:03,184:INFO:Received answer 'F' from BOT_Kevin at 2024-04-20 21:59:03.184872
+2024-04-20 21:59:03,184:INFO:BOT_Kevin is correct with the answer of F!
+2024-04-20 21:59:07,496:INFO:The asked question of round 3 is The Golden State Warriors broke the record for the most wins in a season in 2016.
+2024-04-20 21:59:08,540:INFO:Received answer 'F' from BOT_Manu at 2024-04-20 21:59:08.540966
+2024-04-20 21:59:08,541:INFO:BOT_Manu is incorrect the answer of F!
+2024-04-20 21:59:08,649:INFO:Received answer 'T' from BOT_Kevin at 2024-04-20 21:59:08.649421
+2024-04-20 21:59:08,650:INFO:BOT_Kevin is correct with the answer of T!
+2024-04-20 21:59:09,023:INFO:Received answer 'F' from BOT_Kyrie at 2024-04-20 21:59:09.023639
+2024-04-20 21:59:09,023:INFO:BOT_Kyrie is incorrect the answer of F!
+2024-04-20 21:59:09,164:INFO:Received answer 'T' from BOT_Blake at 2024-04-20 21:59:09.164951
+2024-04-20 21:59:09,165:INFO:BOT_Blake is correct with the answer of T!
+2024-04-20 21:59:11,814:INFO:Sending message to client BOT_Kyrie about incorrect answer at 2024-04-20 21:59:11.814485
+2024-04-20 21:59:11,814:INFO:Sending message to client BOT_Manu about incorrect answer at 2024-04-20 21:59:11.814485
+2024-04-20 21:59:13,119:INFO:The asked question of round 4 is The Miami Heat was established in 1970.
+2024-04-20 21:59:14,314:INFO:Received answer 'T' from BOT_Blake at 2024-04-20 21:59:14.314605
+2024-04-20 21:59:14,314:INFO:BOT_Blake is incorrect the answer of T!
+2024-04-20 21:59:14,690:INFO:Received answer 'F' from BOT_Kevin at 2024-04-20 21:59:14.690977
+2024-04-20 21:59:14,690:INFO:BOT_Kevin is correct with the answer of F!
+2024-04-20 21:59:17,444:INFO:Sending message to client BOT_Blake about incorrect answer at 2024-04-20 21:59:17.444657
+2024-04-20 21:59:18,754:INFO:Game over!
+Congratulations to the winner: BOT_Kevin.
+
+2024-04-20 21:59:18,755:INFO:Disconnected: BOT_Blake has been removed from the game.
+2024-04-20 21:59:18,755:INFO:Disconnected: BOT_Kyrie has been removed from the game.
+2024-04-20 21:59:18,756:INFO:Disconnected: BOT_Charles has been removed from the game.
+2024-04-20 21:59:18,756:INFO:Disconnected: BOT_Manu has been removed from the game.
+2024-04-20 21:59:18,756:INFO:Disconnected: BOT_Kevin has been removed from the game.
+2024-04-20 21:59:18,756:INFO:Disconnected: BOT_Patrick has been removed from the game.
+2024-04-20 21:59:18,756:INFO:Disconnected: BOT_Damian has been removed from the game.
+2024-04-20 21:59:18,756:INFO:Game started at 2024-04-20 21:59:18.756623
+2024-04-20 21:59:20,069:INFO:New client 192.168.0.105 connected.
+2024-04-20 21:59:20,069:INFO:Team BOT_Kevin connected from 192.168.0.105
+2024-04-20 21:59:32,711:ERROR:Accepting new client timed out: timed out
+2024-04-20 21:59:44,016:ERROR:Accepting new client timed out: timed out
+2024-04-20 21:59:44,016:INFO:Only one player connected, game canceled.
+2024-04-20 21:59:44,016:INFO:Game canceled due to insufficient players.
+2024-04-20 22:02:22,778:INFO:Game started at 2024-04-20 22:02:22.777810
+2024-04-20 22:02:22,781:INFO:New client 192.168.0.105 connected.
+2024-04-20 22:02:22,781:INFO:Team BOT_Kyrie connected from 192.168.0.105
+2024-04-20 22:02:25,402:INFO:New client 192.168.0.105 connected.
+2024-04-20 22:02:25,403:INFO:Team BOT_James connected from 192.168.0.105
+2024-04-20 22:02:28,010:INFO:New client 192.168.0.105 connected.
+2024-04-20 22:02:28,011:INFO:Team BOT_Giannis connected from 192.168.0.105
+2024-04-20 22:02:30,636:INFO:New client 192.168.0.105 connected.
+2024-04-20 22:02:30,637:INFO:Team BOT_LeBron connected from 192.168.0.105
+2024-04-20 22:02:33,254:INFO:New client 192.168.0.105 connected.
+2024-04-20 22:02:33,254:INFO:Team BOT_Dwyane connected from 192.168.0.105
+2024-04-20 22:02:35,876:INFO:New client 192.168.0.105 connected.
+2024-04-20 22:02:35,877:INFO:Team BOT_Paul connected from 192.168.0.105
+2024-04-20 22:02:38,501:INFO:New client 192.168.0.105 connected.
+2024-04-20 22:02:38,503:INFO:Team BOT_Scottie connected from 192.168.0.105
+2024-04-20 22:02:51,139:ERROR:Accepting new client timed out: timed out
+2024-04-20 22:02:51,139:INFO:Start new game at 2024-04-20 22:02:51.139084
+2024-04-20 22:02:51,139:INFO:The asked question of round 1 is The Toronto Raptors won their first NBA Championship in 2019.
+2024-04-20 22:02:51,693:INFO:Received answer 'T' from BOT_Paul at 2024-04-20 22:02:51.693481
+2024-04-20 22:02:51,693:INFO:BOT_Paul is correct with the answer of T!
+2024-04-20 22:02:51,738:INFO:Received answer 'T' from BOT_James at 2024-04-20 22:02:51.738821
+2024-04-20 22:02:51,739:INFO:BOT_James is correct with the answer of T!
+2024-04-20 22:02:51,818:INFO:Received answer 'F' from BOT_Dwyane at 2024-04-20 22:02:51.818026
+2024-04-20 22:02:51,818:INFO:BOT_Dwyane is incorrect the answer of F!
+2024-04-20 22:02:52,302:INFO:Received answer 'F' from BOT_Kyrie at 2024-04-20 22:02:52.302079
+2024-04-20 22:02:52,303:INFO:BOT_Kyrie is incorrect the answer of F!
+2024-04-20 22:02:52,722:INFO:Received answer 'T' from BOT_LeBron at 2024-04-20 22:02:52.722651
+2024-04-20 22:02:52,723:INFO:BOT_LeBron is correct with the answer of T!
+2024-04-20 22:02:52,815:INFO:Received answer 'T' from BOT_Scottie at 2024-04-20 22:02:52.815878
+2024-04-20 22:02:52,815:INFO:BOT_Scottie is correct with the answer of T!
+2024-04-20 22:02:52,941:INFO:Received answer 'F' from BOT_Giannis at 2024-04-20 22:02:52.941152
+2024-04-20 22:02:52,941:INFO:BOT_Giannis is incorrect the answer of F!
+2024-04-20 22:02:55,462:INFO:Sending message to client BOT_Kyrie about incorrect answer at 2024-04-20 22:02:55.462026
+2024-04-20 22:02:55,462:INFO:Sending message to client BOT_Giannis about incorrect answer at 2024-04-20 22:02:55.462026
+2024-04-20 22:02:55,462:INFO:Sending message to client BOT_Dwyane about incorrect answer at 2024-04-20 22:02:55.462026
+2024-04-20 22:02:56,763:INFO:The asked question of round 2 is Allen Iverson won two NBA championships.
+2024-04-20 22:02:57,731:INFO:Received answer 'T' from BOT_Paul at 2024-04-20 22:02:57.731905
+2024-04-20 22:02:57,732:INFO:BOT_Paul is incorrect the answer of T!
+2024-04-20 22:02:57,888:INFO:Received answer 'T' from BOT_LeBron at 2024-04-20 22:02:57.888267
+2024-04-20 22:02:57,888:INFO:BOT_LeBron is incorrect the answer of T!
+2024-04-20 22:02:58,282:INFO:Received answer 'T' from BOT_Scottie at 2024-04-20 22:02:58.282347
+2024-04-20 22:02:58,284:INFO:BOT_Scottie is incorrect the answer of T!
+2024-04-20 22:02:58,532:INFO:Received answer 'T' from BOT_James at 2024-04-20 22:02:58.532439
+2024-04-20 22:02:58,532:INFO:BOT_James is incorrect the answer of T!
+2024-04-20 22:03:01,076:INFO:All players answered incorrectly at round 3. Preparing another question...
+2024-04-20 22:03:02,387:INFO:The asked question of round 3 is Kobe Bryant spent his entire career with the Los Angeles Lakers.
+2024-04-20 22:03:02,388:INFO:Received answer 'F' from BOT_James at 2024-04-20 22:03:02.388208
+2024-04-20 22:03:02,389:INFO:BOT_James is incorrect the answer of F!
+2024-04-20 22:03:02,390:INFO:Received answer 'T' from BOT_Paul at 2024-04-20 22:03:02.390201
+2024-04-20 22:03:02,390:INFO:BOT_Paul is correct with the answer of T!
+2024-04-20 22:03:02,391:INFO:Received answer 'F' from BOT_Scottie at 2024-04-20 22:03:02.391204
+2024-04-20 22:03:02,391:INFO:BOT_Scottie is incorrect the answer of F!
+2024-04-20 22:03:02,577:INFO:Received answer 'T' from BOT_LeBron at 2024-04-20 22:03:02.577700
+2024-04-20 22:03:02,578:INFO:BOT_LeBron is correct with the answer of T!
+2024-04-20 22:03:06,704:INFO:Sending message to client BOT_James about incorrect answer at 2024-04-20 22:03:06.704095
+2024-04-20 22:03:06,705:INFO:Sending message to client BOT_Scottie about incorrect answer at 2024-04-20 22:03:06.705324
+2024-04-20 22:03:08,009:INFO:The asked question of round 4 is Kareem Abdul-Jabbar scored 100 points in a single NBA game.
+2024-04-20 22:03:08,011:INFO:Received answer 'F' from BOT_LeBron at 2024-04-20 22:03:08.011055
+2024-04-20 22:03:08,011:INFO:BOT_LeBron is correct with the answer of F!
+2024-04-20 22:03:08,012:INFO:Received answer 'T' from BOT_Paul at 2024-04-20 22:03:08.012053
+2024-04-20 22:03:08,012:INFO:BOT_Paul is incorrect the answer of T!
+2024-04-20 22:03:12,328:INFO:Sending message to client BOT_Paul about incorrect answer at 2024-04-20 22:03:12.328360
+2024-04-20 22:03:13,642:INFO:Game over!
+Congratulations to the winner: BOT_LeBron.
+
+2024-04-20 22:03:13,643:INFO:Disconnected: BOT_Kyrie has been removed from the game.
+2024-04-20 22:03:13,644:INFO:Disconnected: BOT_James has been removed from the game.
+2024-04-20 22:03:13,644:INFO:Disconnected: BOT_Giannis has been removed from the game.
+2024-04-20 22:03:13,645:INFO:Disconnected: BOT_LeBron has been removed from the game.
+2024-04-20 22:03:13,645:INFO:Disconnected: BOT_Dwyane has been removed from the game.
+2024-04-20 22:03:13,646:INFO:Disconnected: BOT_Paul has been removed from the game.
+2024-04-20 22:03:13,647:INFO:Disconnected: BOT_Scottie has been removed from the game.
+2024-04-20 22:03:13,647:INFO:Game started at 2024-04-20 22:03:13.647967
+2024-04-20 22:03:13,652:INFO:New client 192.168.0.105 connected.
+2024-04-20 22:03:13,652:INFO:Team BOT_LeBron connected from 192.168.0.105
+2024-04-20 22:03:16,273:INFO:New client 192.168.0.105 connected.
+2024-04-20 22:03:16,274:INFO:Team BOT_Scottie connected from 192.168.0.105
+2024-04-20 22:03:18,890:INFO:New client 192.168.0.105 connected.
+2024-04-20 22:03:18,890:INFO:Team BOT_James connected from 192.168.0.105
+2024-04-20 22:03:21,500:INFO:New client 192.168.0.105 connected.
+2024-04-20 22:03:21,501:INFO:Team BOT_Paul connected from 192.168.0.105
+2024-04-20 22:03:34,134:ERROR:Accepting new client timed out: timed out
+2024-04-20 22:03:34,134:INFO:Start new game at 2024-04-20 22:03:34.134787
+2024-04-20 22:03:34,134:INFO:The asked question of round 1 is The Toronto Raptors won their first NBA Championship in 2019.
+2024-04-20 22:03:34,915:INFO:Received answer 'F' from BOT_LeBron at 2024-04-20 22:03:34.915745
+2024-04-20 22:03:34,915:INFO:BOT_LeBron is incorrect the answer of F!
+2024-04-20 22:03:35,441:INFO:Received answer 'T' from BOT_Scottie at 2024-04-20 22:03:35.441671
+2024-04-20 22:03:35,441:INFO:BOT_Scottie is correct with the answer of T!
+2024-04-20 22:03:35,631:INFO:Received answer 'T' from BOT_James at 2024-04-20 22:03:35.631370
+2024-04-20 22:03:35,631:INFO:BOT_James is correct with the answer of T!
+2024-04-20 22:03:36,012:INFO:Received answer 'F' from BOT_Paul at 2024-04-20 22:03:36.012054
+2024-04-20 22:03:36,012:INFO:BOT_Paul is incorrect the answer of F!
+2024-04-20 22:03:38,453:INFO:Sending message to client BOT_LeBron about incorrect answer at 2024-04-20 22:03:38.453446
+2024-04-20 22:03:38,453:INFO:Sending message to client BOT_Paul about incorrect answer at 2024-04-20 22:03:38.453446
+2024-04-20 22:03:39,753:INFO:The asked question of round 2 is The Chicago Bulls have won 10 NBA championships.
+2024-04-20 22:03:40,804:INFO:Received answer 'T' from BOT_Scottie at 2024-04-20 22:03:40.804314
+2024-04-20 22:03:40,804:INFO:BOT_Scottie is incorrect the answer of T!
+2024-04-20 22:03:41,569:INFO:Received answer 'F' from BOT_James at 2024-04-20 22:03:41.569982
+2024-04-20 22:03:41,569:INFO:BOT_James is correct with the answer of F!
+2024-04-20 22:03:44,070:INFO:Sending message to client BOT_Scottie about incorrect answer at 2024-04-20 22:03:44.070482
+2024-04-20 22:03:45,372:INFO:Game over!
+Congratulations to the winner: BOT_James.
+
+2024-04-20 22:03:45,372:INFO:Disconnected: BOT_LeBron has been removed from the game.
+2024-04-20 22:03:45,372:INFO:Disconnected: BOT_Scottie has been removed from the game.
+2024-04-20 22:03:45,373:INFO:Disconnected: BOT_James has been removed from the game.
+2024-04-20 22:03:45,373:INFO:Disconnected: BOT_Paul has been removed from the game.
+2024-04-20 22:03:45,374:INFO:Game started at 2024-04-20 22:03:45.373500
+2024-04-20 22:03:46,688:INFO:New client 192.168.0.105 connected.
+2024-04-20 22:03:46,688:INFO:Team BOT_James connected from 192.168.0.105
+2024-04-20 22:03:59,314:ERROR:Accepting new client timed out: timed out
+2024-04-20 22:04:10,635:ERROR:Accepting new client timed out: timed out
+2024-04-20 22:04:10,635:INFO:Only one player connected, game canceled.
+2024-04-20 22:04:10,635:INFO:Game canceled due to insufficient players.
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"AutoImportSettings\">\r\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\r\n  </component>\r\n  <component name=\"ChangeListManager\">\r\n    <list default=\"true\" id=\"4b125e54-2be9-48a8-902e-9cc7aee8c5a7\" name=\"Changes\" comment=\"add colors and resolve conflicts\">\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/workspace.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/workspace.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/Client.py\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/Client.py\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/Server.py\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/Server.py\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/server.log\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/server.log\" afterDir=\"false\" />\r\n    </list>\r\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\r\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\r\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\r\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\r\n  </component>\r\n  <component name=\"FileTemplateManagerImpl\">\r\n    <option name=\"RECENT_TEMPLATES\">\r\n      <list>\r\n        <option value=\"Python Script\" />\r\n      </list>\r\n    </option>\r\n  </component>\r\n  <component name=\"Git.Settings\">\r\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\r\n  </component>\r\n  <component name=\"GitHubPullRequestSearchHistory\"><![CDATA[{\r\n  \"lastFilter\": {\r\n    \"state\": \"OPEN\",\r\n    \"assignee\": \"odedati\"\r\n  }\r\n}]]></component>\r\n  <component name=\"GithubPullRequestsUISettings\"><![CDATA[{\r\n  \"selectedUrlAndAccountId\": {\r\n    \"url\": \"https://github.com/barakhaziz/Trivia_King.git\",\r\n    \"accountId\": \"3ae3fa48-dd1c-437b-b593-85eac3db9b81\"\r\n  }\r\n}]]></component>\r\n  <component name=\"MarkdownSettingsMigration\">\r\n    <option name=\"stateVersion\" value=\"1\" />\r\n  </component>\r\n  <component name=\"ProjectColorInfo\">{\r\n  &quot;associatedIndex&quot;: 5\r\n}</component>\r\n  <component name=\"ProjectId\" id=\"2eDxafKyTgwscsfmkoAQYGz33fM\" />\r\n  <component name=\"ProjectLevelVcsManager\" settingsEditedManually=\"true\">\r\n    <ConfirmationsSetting value=\"2\" id=\"Add\" />\r\n  </component>\r\n  <component name=\"ProjectViewState\">\r\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\r\n    <option name=\"showLibraryContents\" value=\"true\" />\r\n  </component>\r\n  <component name=\"PropertiesComponent\"><![CDATA[{\r\n  \"keyToString\": {\r\n    \"ASKED_ADD_EXTERNAL_FILES\": \"true\",\r\n    \"Python.7 bot clients.executor\": \"Run\",\r\n    \"Python.main.executor\": \"Run\",\r\n    \"RunOnceActivity.OpenProjectViewOnStart\": \"true\",\r\n    \"RunOnceActivity.ShowReadmeOnStart\": \"true\",\r\n    \"WebServerToolWindowFactoryState\": \"false\",\r\n    \"git-widget-placeholder\": \"master\",\r\n    \"node.js.detected.package.eslint\": \"true\",\r\n    \"node.js.detected.package.tslint\": \"true\",\r\n    \"node.js.selected.package.eslint\": \"(autodetect)\",\r\n    \"node.js.selected.package.tslint\": \"(autodetect)\",\r\n    \"nodejs_package_manager_path\": \"npm\",\r\n    \"settings.editor.selected.configurable\": \"org.jetbrains.plugins.github.ui.GithubSettingsConfigurable\",\r\n    \"vue.rearranger.settings.migration\": \"true\"\r\n  }\r\n}]]></component>\r\n  <component name=\"RunManager\">\r\n    <configuration name=\"main\" type=\"PythonConfigurationType\" factoryName=\"Python\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <module name=\"Trivia_King\" />\r\n      <option name=\"ENV_FILES\" value=\"\" />\r\n      <option name=\"INTERPRETER_OPTIONS\" value=\"\" />\r\n      <option name=\"PARENT_ENVS\" value=\"true\" />\r\n      <envs>\r\n        <env name=\"PYTHONUNBUFFERED\" value=\"1\" />\r\n      </envs>\r\n      <option name=\"SDK_HOME\" value=\"\" />\r\n      <option name=\"WORKING_DIRECTORY\" value=\"$PROJECT_DIR$\" />\r\n      <option name=\"IS_MODULE_SDK\" value=\"false\" />\r\n      <option name=\"ADD_CONTENT_ROOTS\" value=\"true\" />\r\n      <option name=\"ADD_SOURCE_ROOTS\" value=\"true\" />\r\n      <EXTENSION ID=\"PythonCoverageRunConfigurationExtension\" runner=\"coverage.py\" />\r\n      <option name=\"SCRIPT_NAME\" value=\"$PROJECT_DIR$/main.py\" />\r\n      <option name=\"PARAMETERS\" value=\"\" />\r\n      <option name=\"SHOW_COMMAND_LINE\" value=\"false\" />\r\n      <option name=\"EMULATE_TERMINAL\" value=\"false\" />\r\n      <option name=\"MODULE_MODE\" value=\"false\" />\r\n      <option name=\"REDIRECT_INPUT\" value=\"false\" />\r\n      <option name=\"INPUT_FILE\" value=\"\" />\r\n      <method v=\"2\" />\r\n    </configuration>\r\n    <recent_temporary>\r\n      <list>\r\n        <item itemvalue=\"Python.main\" />\r\n      </list>\r\n    </recent_temporary>\r\n  </component>\r\n  <component name=\"SharedIndexes\">\r\n    <attachedChunks>\r\n      <set>\r\n        <option value=\"bundled-python-sdk-5a2391486177-2887949eec09-com.jetbrains.pycharm.pro.sharedIndexes.bundled-PY-233.13763.11\" />\r\n      </set>\r\n    </attachedChunks>\r\n  </component>\r\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\r\n  <component name=\"TaskManager\">\r\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\r\n      <changelist id=\"4b125e54-2be9-48a8-902e-9cc7aee8c5a7\" name=\"Changes\" comment=\"\" />\r\n      <created>1711453014273</created>\r\n      <option name=\"number\" value=\"Default\" />\r\n      <option name=\"presentableId\" value=\"Default\" />\r\n      <updated>1711453014273</updated>\r\n      <workItem from=\"1711453022637\" duration=\"78156000\" />\r\n      <workItem from=\"1713570128437\" duration=\"28215000\" />\r\n    </task>\r\n    <task id=\"LOCAL\u200E-00001\" summary=\"hello_word\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1711453362210</created>\r\n      <option name=\"number\" value=\"00001\" />\r\n      <option name=\"presentableId\" value=\"LOCAL\u200E-00001\" />\r\n      <option name=\"project\" value=\"LOCAL\u200E\" />\r\n      <updated>1711453362210</updated>\r\n    </task>\r\n    <task id=\"LOCAL\u200E-00002\" summary=\"hello_word\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1711453520259</created>\r\n      <option name=\"number\" value=\"00002\" />\r\n      <option name=\"presentableId\" value=\"LOCAL\u200E-00002\" />\r\n      <option name=\"project\" value=\"LOCAL\u200E\" />\r\n      <updated>1711453520259</updated>\r\n    </task>\r\n    <task id=\"LOCAL\u200E-00003\" summary=\"client server basic udp\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1711488397637</created>\r\n      <option name=\"number\" value=\"00003\" />\r\n      <option name=\"presentableId\" value=\"LOCAL\u200E-00003\" />\r\n      <option name=\"project\" value=\"LOCAL\u200E\" />\r\n      <updated>1711488397637</updated>\r\n    </task>\r\n    <task id=\"LOCAL\u200E-00004\" summary=\"first TCP connection\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1711721996446</created>\r\n      <option name=\"number\" value=\"00004\" />\r\n      <option name=\"presentableId\" value=\"LOCAL\u200E-00004\" />\r\n      <option name=\"project\" value=\"LOCAL\u200E\" />\r\n      <updated>1711721996446</updated>\r\n    </task>\r\n    <task id=\"LOCAL\u200E-00005\" summary=\"starting the trivia game\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1711812922038</created>\r\n      <option name=\"number\" value=\"00005\" />\r\n      <option name=\"presentableId\" value=\"LOCAL\u200E-00005\" />\r\n      <option name=\"project\" value=\"LOCAL\u200E\" />\r\n      <updated>1711812922038</updated>\r\n    </task>\r\n    <task id=\"LOCAL\u200E-00006\" summary=\"functionality added- If nobody answers after 10 seconds, or if all players answered incorrectly and were&#10;disqualified, the server chooses another random trivia question.&#10;**still need to solve error from the fact  we dont close the connection\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1711815787403</created>\r\n      <option name=\"number\" value=\"00006\" />\r\n      <option name=\"presentableId\" value=\"LOCAL\u200E-00006\" />\r\n      <option name=\"project\" value=\"LOCAL\u200E\" />\r\n      <updated>1711815787403</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00007\" summary=\"add the following:&#10;1. fix some bugs&#10;2. handle steps 8 and 9 from the assignment\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1713475017357</created>\r\n      <option name=\"number\" value=\"00007\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00007\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1713475017357</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00008\" summary=\"add the following:&#10;1. fix some bugs&#10;2. handle steps 8 and 9 from the assignment# 4. client disconnect handling: if a player didn't answer in the round, he removed from the game completely - try close it session\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1713541653885</created>\r\n      <option name=\"number\" value=\"00008\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00008\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1713541653885</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00009\" summary=\"add more tasks\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1713542785107</created>\r\n      <option name=\"number\" value=\"00009\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00009\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1713542785107</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00010\" summary=\"# server bugs:&#10;# 1. FIXED! handle case of game over: only one player answer incorrectly and the other didn't answer - Amit\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1713546577697</created>\r\n      <option name=\"number\" value=\"00010\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00010\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1713546577697</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00011\" summary=\"fixed bug 2 and 4\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1713572908805</created>\r\n      <option name=\"number\" value=\"00011\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00011\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1713572908805</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00012\" summary=\"# 1. FIXED in case of duplicate name, the clients wont stop generating the same name and keep try to connect server - Amit\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1713606728728</created>\r\n      <option name=\"number\" value=\"00012\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00012\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1713606728728</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00013\" summary=\"# 2. FIXED! the client didn't start listening for offers after the server close connection\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1713618959693</created>\r\n      <option name=\"number\" value=\"00013\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00013\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1713618959693</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00014\" summary=\"change round increase\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1713629062203</created>\r\n      <option name=\"number\" value=\"00014\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00014\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1713629062203</updated>\r\n    </task>\r\n    <task id=\"LOCAL\u200E-00015\" summary=\"add colors and resolve conflicts\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1713636284234</created>\r\n      <option name=\"number\" value=\"00015\" />\r\n      <option name=\"presentableId\" value=\"LOCAL\u200E-00015\" />\r\n      <option name=\"project\" value=\"LOCAL\u200E\" />\r\n      <updated>1713636284234</updated>\r\n    </task>\r\n    <task id=\"LOCAL\u200E-00016\" summary=\"add colors and resolve conflicts\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1713636447082</created>\r\n      <option name=\"number\" value=\"00016\" />\r\n      <option name=\"presentableId\" value=\"LOCAL\u200E-00016\" />\r\n      <option name=\"project\" value=\"LOCAL\u200E\" />\r\n      <updated>1713636447082</updated>\r\n    </task>\r\n    <option name=\"localTasksCounter\" value=\"17\" />\r\n    <servers />\r\n  </component>\r\n  <component name=\"TypeScriptGeneratedFilesManager\">\r\n    <option name=\"version\" value=\"3\" />\r\n  </component>\r\n  <component name=\"Vcs.Log.Tabs.Properties\">\r\n    <option name=\"TAB_STATES\">\r\n      <map>\r\n        <entry key=\"MAIN\">\r\n          <value>\r\n            <State />\r\n          </value>\r\n        </entry>\r\n      </map>\r\n    </option>\r\n  </component>\r\n  <component name=\"VcsManagerConfiguration\">\r\n    <option name=\"ADD_EXTERNAL_FILES_SILENTLY\" value=\"true\" />\r\n    <MESSAGE value=\"hello_word\" />\r\n    <MESSAGE value=\"client server basic udp\" />\r\n    <MESSAGE value=\"first TCP connection\" />\r\n    <MESSAGE value=\"starting the trivia game\" />\r\n    <MESSAGE value=\"functionality added- If nobody answers after 10 seconds, or if all players answered incorrectly and were&#10;disqualified, the server chooses another random trivia question.&#10;**still need to solve error from the fact  we dont close the connection\" />\r\n    <MESSAGE value=\"add the following:&#10;1. fix some bugs&#10;2. handle steps 8 and 9 from the assignment\" />\r\n    <MESSAGE value=\"add the following:&#10;1. fix some bugs&#10;2. handle steps 8 and 9 from the assignment# 4. client disconnect handling: if a player didn't answer in the round, he removed from the game completely - try close it session\" />\r\n    <MESSAGE value=\"add more tasks\" />\r\n    <MESSAGE value=\"# server bugs:&#10;# 1. FIXED! handle case of game over: only one player answer incorrectly and the other didn't answer - Amit\" />\r\n    <MESSAGE value=\"fixed bug 2 and 4\" />\r\n    <MESSAGE value=\"# 1. FIXED in case of duplicate name, the clients wont stop generating the same name and keep try to connect server - Amit\" />\r\n    <MESSAGE value=\"# 2. FIXED! the client didn't start listening for offers after the server close connection\" />\r\n    <MESSAGE value=\"change round increase\" />\r\n    <MESSAGE value=\"add colors and resolve conflicts\" />\r\n    <option name=\"LAST_COMMIT_MESSAGE\" value=\"add colors and resolve conflicts\" />\r\n  </component>\r\n  <component name=\"XDebuggerManager\">\r\n    <breakpoint-manager>\r\n      <breakpoints>\r\n        <line-breakpoint enabled=\"true\" suspend=\"THREAD\" type=\"python-line\">\r\n          <url>file://$PROJECT_DIR$/Client.py</url>\r\n          <line>176</line>\r\n          <option name=\"timeStamp\" value=\"59\" />\r\n        </line-breakpoint>\r\n      </breakpoints>\r\n      <default-breakpoints>\r\n        <breakpoint type=\"python-exception\">\r\n          <properties notifyOnTerminate=\"true\" exception=\"BaseException\">\r\n            <option name=\"notifyOnTerminate\" value=\"true\" />\r\n          </properties>\r\n        </breakpoint>\r\n      </default-breakpoints>\r\n    </breakpoint-manager>\r\n  </component>\r\n  <component name=\"com.intellij.coverage.CoverageDataManagerImpl\">\r\n    <SUITE FILE_PATH=\"coverage/Trivia_King$p2_client.coverage\" NAME=\"p2 client Coverage Results\" MODIFIED=\"1713622733725\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"coverage.py\" COVERAGE_BY_TEST_ENABLED=\"false\" COVERAGE_TRACING_ENABLED=\"false\" WORKING_DIRECTORY=\"$USER_HOME$/Downloads\" />\r\n    <SUITE FILE_PATH=\"coverage/Trivia_King$blb.coverage\" NAME=\"blb Coverage Results\" MODIFIED=\"1713623777783\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"coverage.py\" COVERAGE_BY_TEST_ENABLED=\"false\" COVERAGE_TRACING_ENABLED=\"false\" WORKING_DIRECTORY=\"$PROJECT_DIR$\" />\r\n    <SUITE FILE_PATH=\"coverage/Trivia_King$7_bot_clients.coverage\" NAME=\"7 bot clients Coverage Results\" MODIFIED=\"1713638206692\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"coverage.py\" COVERAGE_BY_TEST_ENABLED=\"false\" COVERAGE_TRACING_ENABLED=\"false\" WORKING_DIRECTORY=\"$PROJECT_DIR$\" />\r\n    <SUITE FILE_PATH=\"coverage/Trivia_King$main.coverage\" NAME=\"main Coverage Results\" MODIFIED=\"1713638207616\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"coverage.py\" COVERAGE_BY_TEST_ENABLED=\"false\" COVERAGE_TRACING_ENABLED=\"false\" WORKING_DIRECTORY=\"$PROJECT_DIR$\" />\r\n    <SUITE FILE_PATH=\"coverage/Trivia_King$p3_client.coverage\" NAME=\"p3 client Coverage Results\" MODIFIED=\"1713630599026\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"coverage.py\" COVERAGE_BY_TEST_ENABLED=\"false\" COVERAGE_TRACING_ENABLED=\"false\" WORKING_DIRECTORY=\"$USER_HOME$/Downloads\" />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision a6b8f2e9c7fe6baec81eff0fe66d8f04b76a7a87)
+++ b/.idea/workspace.xml	(date 1713639996161)
@@ -4,7 +4,7 @@
     <option name="autoReloadType" value="SELECTIVE" />
   </component>
   <component name="ChangeListManager">
-    <list default="true" id="4b125e54-2be9-48a8-902e-9cc7aee8c5a7" name="Changes" comment="add colors and resolve conflicts">
+    <list default="true" id="4b125e54-2be9-48a8-902e-9cc7aee8c5a7" name="Changes" comment="add colors to clients">
       <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/Client.py" beforeDir="false" afterPath="$PROJECT_DIR$/Client.py" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/Server.py" beforeDir="false" afterPath="$PROJECT_DIR$/Server.py" afterDir="false" />
@@ -245,7 +245,15 @@
       <option name="project" value="LOCAL‎" />
       <updated>1713636447082</updated>
     </task>
-    <option name="localTasksCounter" value="17" />
+    <task id="LOCAL‎-00017" summary="add colors to clients">
+      <option name="closed" value="true" />
+      <created>1713638585520</created>
+      <option name="number" value="00017" />
+      <option name="presentableId" value="LOCAL‎-00017" />
+      <option name="project" value="LOCAL‎" />
+      <updated>1713638585520</updated>
+    </task>
+    <option name="localTasksCounter" value="18" />
     <servers />
   </component>
   <component name="TypeScriptGeneratedFilesManager">
@@ -278,7 +286,8 @@
     <MESSAGE value="# 2. FIXED! the client didn't start listening for offers after the server close connection" />
     <MESSAGE value="change round increase" />
     <MESSAGE value="add colors and resolve conflicts" />
-    <option name="LAST_COMMIT_MESSAGE" value="add colors and resolve conflicts" />
+    <MESSAGE value="add colors to clients" />
+    <option name="LAST_COMMIT_MESSAGE" value="add colors to clients" />
   </component>
   <component name="XDebuggerManager">
     <breakpoint-manager>
@@ -301,8 +310,8 @@
   <component name="com.intellij.coverage.CoverageDataManagerImpl">
     <SUITE FILE_PATH="coverage/Trivia_King$p2_client.coverage" NAME="p2 client Coverage Results" MODIFIED="1713622733725" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="coverage.py" COVERAGE_BY_TEST_ENABLED="false" COVERAGE_TRACING_ENABLED="false" WORKING_DIRECTORY="$USER_HOME$/Downloads" />
     <SUITE FILE_PATH="coverage/Trivia_King$blb.coverage" NAME="blb Coverage Results" MODIFIED="1713623777783" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="coverage.py" COVERAGE_BY_TEST_ENABLED="false" COVERAGE_TRACING_ENABLED="false" WORKING_DIRECTORY="$PROJECT_DIR$" />
-    <SUITE FILE_PATH="coverage/Trivia_King$7_bot_clients.coverage" NAME="7 bot clients Coverage Results" MODIFIED="1713638206692" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="coverage.py" COVERAGE_BY_TEST_ENABLED="false" COVERAGE_TRACING_ENABLED="false" WORKING_DIRECTORY="$PROJECT_DIR$" />
-    <SUITE FILE_PATH="coverage/Trivia_King$main.coverage" NAME="main Coverage Results" MODIFIED="1713638207616" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="coverage.py" COVERAGE_BY_TEST_ENABLED="false" COVERAGE_TRACING_ENABLED="false" WORKING_DIRECTORY="$PROJECT_DIR$" />
+    <SUITE FILE_PATH="coverage/Trivia_King$7_bot_clients.coverage" NAME="7 bot clients Coverage Results" MODIFIED="1713639740212" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="coverage.py" COVERAGE_BY_TEST_ENABLED="false" COVERAGE_TRACING_ENABLED="false" WORKING_DIRECTORY="$PROJECT_DIR$" />
+    <SUITE FILE_PATH="coverage/Trivia_King$main.coverage" NAME="main Coverage Results" MODIFIED="1713639742694" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="coverage.py" COVERAGE_BY_TEST_ENABLED="false" COVERAGE_TRACING_ENABLED="false" WORKING_DIRECTORY="$PROJECT_DIR$" />
     <SUITE FILE_PATH="coverage/Trivia_King$p3_client.coverage" NAME="p3 client Coverage Results" MODIFIED="1713630599026" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="coverage.py" COVERAGE_BY_TEST_ENABLED="false" COVERAGE_TRACING_ENABLED="false" WORKING_DIRECTORY="$USER_HOME$/Downloads" />
   </component>
 </project>
\ No newline at end of file
